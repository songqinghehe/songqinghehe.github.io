[{"title":"Go语言中的 Array, Slice和 Map","url":"http://grooes.com/2017/09/17/Go语言中的-Array-Slice和-Map/","content":"<blockquote>\n<p>Array, Slice和 Map的区别</p>\n</blockquote>\n<ul>\n<li>Array 是值类型，Slice 和 Map 是引用类型。他们是有很大区别的，尤其是在参数传递的时候。</li>\n<li>Slice 和 Map 的变量 仅仅声明是不行的，必须还要分配空间（也就是初始化，initialization） 才可以使用。</li>\n<li>Slice 和 Map 这些引用变量 的 内存分配，不需要你操心，因为 golang 是存在 gc 机制的（垃圾回收机制）</li>\n</ul>\n<h3 id=\"Array-的用法\"><a href=\"#Array-的用法\" class=\"headerlink\" title=\"Array 的用法\"></a>Array 的用法</h3><ul>\n<li><p>数组的声明（这里就是定义，给数据存储分配了空间）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arrayName [arraySize] dataType</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果数组定义好之后， 没有给数组元素指定值，那么所有元素被自动初始化为零值</p>\n</li>\n<li><p>数组的初始化</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">10</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125; <span class=\"comment\">//定义数组的时候，直接初始化</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">10</span>]<span class=\"keyword\">int</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;  <span class=\"comment\">//部分元素初始化， 其余元素零值</span></div><div class=\"line\"><span class=\"keyword\">var</span> c = [...]<span class=\"keyword\">int</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;   <span class=\"comment\">//由初始化列表决定数组长度，不可省去标识符 \"...\"，否则将变成切片Slice</span></div><div class=\"line\"><span class=\"keyword\">var</span> d = [<span class=\"number\">10</span>]&#123;<span class=\"number\">2</span>:<span class=\"number\">4</span>, <span class=\"number\">5</span>:<span class=\"number\">7</span>&#125;   <span class=\"comment\">//可以按照下标来进行初始化</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>数组的访问，可以直接按照下标进行访问</p>\n</li>\n<li><p>数组的遍历(for)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span>(</div><div class=\"line\">   <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> f = [<span class=\"number\">20</span>]<span class=\"keyword\">int</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">2</span>; i &lt; <span class=\"number\">20</span>; i++ &#123;</div><div class=\"line\">        f[i] = f[i<span class=\"number\">-1</span>] + f[i<span class=\"number\">-2</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++ &#123;   <span class=\"comment\">//采用下标进行遍历</span></div><div class=\"line\">        <span class=\"keyword\">if</span> i % <span class=\"number\">5</span> == <span class=\"number\">0</span> &#123;</div><div class=\"line\">            fmt.Printf(<span class=\"string\">\"\\n\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        fmt.Printf(<span class=\"string\">\"f[%2d] = %4d\"</span>,i , f[i])</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>数组的遍历(range)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span>(</div><div class=\"line\">   <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> f = [<span class=\"number\">20</span>]<span class=\"keyword\">int</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">2</span>; i &lt; <span class=\"number\">20</span>; i++ &#123;</div><div class=\"line\">        f[i] = f[i<span class=\"number\">-1</span>] + f[i <span class=\"number\">-2</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> i , v := <span class=\"keyword\">range</span> f &#123;   <span class=\"comment\">//采用 range 关键字 进行遍历</span></div><div class=\"line\">        fmt.Printf(<span class=\"string\">\"f[%2d] = %4d\"</span>, i, v)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>多维数组</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a [<span class=\"number\">3</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">3</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span> &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;, &#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>多维数组遍历</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"comment\">//找到二维数组中的最大元素</span></div><div class=\"line\">    <span class=\"keyword\">var</span> i, j, row, col, max <span class=\"keyword\">int</span></div><div class=\"line\">    <span class=\"keyword\">var</span> a = [<span class=\"number\">3</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span> &#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span> , <span class=\"number\">9</span>&#125;, &#123;<span class=\"number\">22</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>&#125;&#125;</div><div class=\"line\">    max = a[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; = <span class=\"number\">2</span>; i ++ &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt;= <span class=\"number\">3</span>; j++ &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> a[i][j] &gt; max &#123;</div><div class=\"line\">                        max = a[i][j]</div><div class=\"line\">                        row = i</div><div class=\"line\">                        col = j</div><div class=\"line\">                    &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    fmt.Println(<span class=\"string\">\"max = %d, row = %d, col = %d\\n\"</span>, max, row, col)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Slice-的用法\"><a href=\"#Slice-的用法\" class=\"headerlink\" title=\"Slice 的用法\"></a>Slice 的用法</h3><blockquote>\n<p>Slice 的声明（没有分配内存）<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s1 []<span class=\"keyword\">int</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>在创建切片的时候，不要指定切片的长度。（否则就成了数组）</li>\n<li>切片的类型可以是Go 语言的任何基本数据类型（也包括 引用类型和 Struct 类型）</li>\n<li>当一个切片被声明之后，没有初始化的时候，这个 s1 默认的值是 nil。切片的长度是0。可以使用内建函数 len() 获得切片的长度，使用内建函数 cap() 获得切片的容量。</li>\n<li><p>Slice 的创建 (分配了内存)</p>\n<blockquote>\n<p>Slice 的创建 (分配了内存)</p>\n</blockquote>\n</li>\n<li><p>三种创建方式： 基于底层数组创建，直接创建，或者 make() 函数创建</p>\n</li>\n<li><p>基于底层数组创建 slice</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> slice1 []<span class=\"keyword\">int</span>   <span class=\"comment\">//声明但是不分配空间</span></div><div class=\"line\">slice1 = array[start:end]  <span class=\"comment\">//这里不包含 end</span></div><div class=\"line\">slice2 := array[:]         <span class=\"comment\">// 引用全部的元素</span></div><div class=\"line\">slice3 := array[<span class=\"number\">0</span>:<span class=\"built_in\">len</span>(array)]</div><div class=\"line\"><span class=\"keyword\">var</span> slice4 []<span class=\"keyword\">int</span></div><div class=\"line\">sliec34 = array    <span class=\"comment\">//引用全部的元素</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>直接创建 slice(在声明的时候，直接初始化。)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> slice1 = []<span class=\"keyword\">int</span> &#123;<span class=\"number\">1</span> ,<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>make() 函数创建 slice</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> slice1 = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>)  <span class=\"comment\">//长度和容量都是 5</span></div><div class=\"line\"><span class=\"keyword\">var</span> slice2 = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>)  <span class=\"comment\">//容量是5.</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>Slice 的 访问和遍历(采用下标进行访问，采用 range 进行遍历。)</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">packge main</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> slice1 = []<span class=\"keyword\">int</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>,<span class=\"number\">3</span> , <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</div><div class=\"line\">    <span class=\"comment\">//使用下标访问 slice</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt;=<span class=\"number\">4</span>; i++ &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"slice[%d] = %d\"</span>, i, slice[i])</div><div class=\"line\">    &#125;</div><div class=\"line\">    fmt.Println()</div><div class=\"line\">    <span class=\"comment\">//使用range 进行遍历</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> slice &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"slice[%d] = %d\"</span>, i, v)</div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Slice 的操作</p>\n</blockquote>\n<ul>\n<li>Slice 中的切片的元素，可以动态的添加和删除，所以操作起来要比数组更加方便</li>\n<li>采用内建函数 append() 向切片尾部，增加新的元素， 这些元素保存到底层的数组。</li>\n<li>append() 并不会影响原来的切片的属性，（原来切片的长度和cap）</li>\n<li>append() 将会返回更新后的切片的对象。</li>\n<li>append() 是个变参函数，可以一次性添加多个对象</li>\n<li>append() 添加元素的个数超过 切片的 cap() 的时候，那么底层会 重新分配一个 “足够大” 的内存，一般来说是将原来的内存空间扩大二倍，然后将数据复制到新的内存中去， 原来的空间会保留 （供原先切片使用）（底层数组变化这个问题，应该关注一下） <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//使用make 创建 切片</span></div><div class=\"line\">    <span class=\"keyword\">var</span> slice1 = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>)</div><div class=\"line\">    <span class=\"comment\">// 使用 append 添加元素，并且未超出 cap</span></div><div class=\"line\">    slice2 := <span class=\"built_in\">append</span>(slice1, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">    <span class=\"comment\">// 使用 append 添加元素，并且超出 cap. 这个时候底层数组会变化，新增加的元素只会添加到新的底层数组，不会覆盖旧的底层数组。</span></div><div class=\"line\">    slice3 := <span class=\"built_in\">append</span>(slice1, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</div><div class=\"line\">    slice1[<span class=\"number\">0</span>] = <span class=\"number\">10</span></div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"len = %d cap = %d %v\\n\"</span>, <span class=\"built_in\">len</span>(slice1), <span class=\"built_in\">cap</span>(slice1), slice1)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"len = %d cap = %d %v\\n\"</span>, <span class=\"built_in\">len</span>(slice2), <span class=\"built_in\">cap</span>(slice2), slice2)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"len = %d cap = %d %v\\n\"</span>, <span class=\"built_in\">len</span>(slice3), <span class=\"built_in\">cap</span>(slice3), slice3)</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">程序输出是：</div><div class=\"line\"><span class=\"built_in\">len</span> = <span class=\"number\">3</span> <span class=\"built_in\">cap</span> = <span class=\"number\">6</span> [<span class=\"number\">10</span> <span class=\"number\">0</span> <span class=\"number\">0</span>]</div><div class=\"line\"><span class=\"built_in\">len</span> = <span class=\"number\">6</span> <span class=\"built_in\">cap</span> = <span class=\"number\">6</span> [<span class=\"number\">10</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]     <span class=\"comment\">// 这里的[1, 2, 3] 没有被 [4, 5, 6]覆盖</span></div><div class=\"line\"><span class=\"built_in\">len</span> = <span class=\"number\">7</span> <span class=\"built_in\">cap</span> = <span class=\"number\">12</span> [<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span>]   <span class=\"comment\">//这里第一个元素没有变成10，并且容量变成原来的2倍。</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>切片元素的复制</p>\n</blockquote>\n<ul>\n<li>使用切片长时间引用超大的底层数组，会导致严重的内存浪费现象。 可以新建一个小的slice 对象，然后将所需要的数据复制过去，这样子就不会引用底层数组，直接拷贝了数据，这就是需求。函数 copy()可以 在切片之间复制元素。</li>\n<li>copy() 可以复制的元素数量取决于 复制方 和 被复制方的最小长度。</li>\n<li>同一个底层数组之间的 元素复制，会导致元素重叠问题。<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> slice1 = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> slice2 = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>)</div><div class=\"line\">    <span class=\"keyword\">var</span> n <span class=\"keyword\">int</span></div><div class=\"line\">    n = <span class=\"built_in\">copy</span>(slice2, slice1) <span class=\"comment\">// just copy three elements</span></div><div class=\"line\">    fmt.Println(n, slice2, <span class=\"built_in\">len</span>(slice2), <span class=\"built_in\">cap</span>(slice2))</div><div class=\"line\"></div><div class=\"line\">    slice3 := slice1[<span class=\"number\">3</span>:<span class=\"number\">6</span>]   <span class=\"comment\">//二者引用同一个底层数组</span></div><div class=\"line\">    n = <span class=\"built_in\">copy</span>(slice3, slice1[<span class=\"number\">1</span>:<span class=\"number\">5</span>])  <span class=\"comment\">//所以，copy的时候发生元素重叠</span></div><div class=\"line\">    fmt.Println(n, slice1, slice3)</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">程序输出为：</div><div class=\"line\"><span class=\"number\">3</span> [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>] <span class=\"number\">3</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">3</span> [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">10</span>] [<span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span>]   <span class=\"comment\">//可以看到元素重叠</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Map-的用法\"><a href=\"#Map-的用法\" class=\"headerlink\" title=\"Map 的用法\"></a>Map 的用法</h3><h5 id=\"map-存储的是-键值对-key-value-。是一个无序的数据的集合，通过键来进行索引得到对应的值。-这种方式可以加快查找速度。Map-通常称为-字典（dictionary）-或者哈希表-Hash-table-。Map-现在是很多语言的标配。\"><a href=\"#map-存储的是-键值对-key-value-。是一个无序的数据的集合，通过键来进行索引得到对应的值。-这种方式可以加快查找速度。Map-通常称为-字典（dictionary）-或者哈希表-Hash-table-。Map-现在是很多语言的标配。\" class=\"headerlink\" title=\"map 存储的是 键值对(key-value)。是一个无序的数据的集合，通过键来进行索引得到对应的值。 这种方式可以加快查找速度。Map 通常称为 字典（dictionary） 或者哈希表(Hash table)。Map 现在是很多语言的标配。\"></a>map 存储的是 键值对(key-value)。是一个无序的数据的集合，通过键来进行索引得到对应的值。 这种方式可以加快查找速度。Map 通常称为 字典（dictionary） 或者哈希表(Hash table)。Map 现在是很多语言的标配。</h5><blockquote>\n<p>字典的声明</p>\n</blockquote>\n<ul>\n<li>字典名称，“键”类型， “值”类型 </li>\n<li>不需要给字典指定长度，字典的长度会在初始化或者创建的过程中动态增长</li>\n<li>Key 必须是能支持 比较运算符（==, !=）的数据类型，比如 整数，浮点数，指针，数组，结构体，接口等。 而不能是 函数，字典，切片这些类型。</li>\n<li>Value 类型 可以是Go语言的任何基本数据类型。<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mapName <span class=\"keyword\">map</span>[keyType]valueType</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>字典的初始化 和 创建</p>\n</blockquote>\n<ul>\n<li>字典 声明好之后，必须经过初始化或者创建 才能使用。未初始化或者创建的字典为 nil</li>\n<li>可以使用“{}”来在声明的时候进行初始化</li>\n<li>可是使用 make()来创建字典</li>\n<li>创建或者初始化之后，就可以使用 “=”操作符来动态的向字典中添加数据项了<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map1 <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span> &#123;&#125;  <span class=\"comment\">//字典的初始化</span></div><div class=\"line\">map1[<span class=\"string\">\"key1\"</span>] = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> map2 <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></div><div class=\"line\">map2 = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)  <span class=\"comment\">//字典的创建</span></div><div class=\"line\">map2[<span class=\"string\">\"key2\"</span>] = <span class=\"number\">2</span>    <span class=\"comment\">//使用 等号 添加数据项</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> map3 <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></div><div class=\"line\">map3[<span class=\"string\">\"key1\"</span>] = <span class=\"number\">2</span>   <span class=\"comment\">//编译不通过，字典没有初始化或者创建</span></div><div class=\"line\"></div><div class=\"line\">v, OK := mapName[Key]    <span class=\"comment\">//元素的查找 注意这里是 :=</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> map1 = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"key1\"</span>: <span class=\"number\">100</span>, <span class=\"string\">\"key2\"</span>: <span class=\"number\">200</span>&#125;</div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    v, OK := map1[<span class=\"string\">\"key1\"</span>]</div><div class=\"line\">    <span class=\"keyword\">if</span> OK &#123;</div><div class=\"line\">        fmt.Println(v, OK)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        fmt.Println(v)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 这里 不是 :=，是 = ，因为这些变量已经定义过了。</span></div><div class=\"line\">    v, OK = map1[<span class=\"string\">\"key3\"</span>]</div><div class=\"line\">    <span class=\"keyword\">if</span> OK &#123;</div><div class=\"line\">        fmt.Println(v, OK)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        fmt.Println(v)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">输出为：</div><div class=\"line\"><span class=\"number\">100</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>字典项的删除</p>\n</blockquote>\n<ul>\n<li>go 提供了内置函数 delete() 来删除容器内的元素。(如果key1值不存在，那么调用将什么也不发生，也不会产生副作用。 但是，如果传入的map 是一个 nil，那么将导致程序出现异常，这一点在写程序的时候特别注意。)<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">delete</span>(map1, <span class=\"string\">\"key1\"</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> map1 = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"key1\"</span>: <span class=\"number\">100</span>, <span class=\"string\">\"key2\"</span>: <span class=\"number\">200</span>, <span class=\"string\">\"key3\"</span>: <span class=\"number\">300</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> map1 &#123;</div><div class=\"line\">        fmt.Println(k, v)</div><div class=\"line\">        <span class=\"keyword\">if</span> k == <span class=\"string\">\"key2\"</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">delete</span>(map1, k)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> k == <span class=\"string\">\"key3\"</span> &#123;</div><div class=\"line\">            map1[<span class=\"string\">\"key4\"</span>] = <span class=\"number\">400</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(map1)</div><div class=\"line\">&#125;</div><div class=\"line\">程序输出：</div><div class=\"line\">key2 <span class=\"number\">200</span></div><div class=\"line\">key3 <span class=\"number\">300</span></div><div class=\"line\">key1 <span class=\"number\">100</span></div><div class=\"line\"><span class=\"keyword\">map</span>[key1:<span class=\"number\">100</span> key4:<span class=\"number\">400</span> key3:<span class=\"number\">300</span>]  <span class=\"comment\">//可以看到 map 是无序的。</span></div></pre></td></tr></table></figure>","categories":[],"tags":["go"]},{"title":"mysql安装那点事儿","url":"http://grooes.com/2017/09/17/mysql安装那点事儿/","content":"<blockquote>\n<p>安装mysql</p>\n</blockquote>\n<p>rpm -qa | grep mysql　　// 这个命令就会查看该操作系统上是否已经安装了mysql数据库<br><br>rpm -e mysql　　// 普通删除模式<br><br>rpm -e –nodeps mysql　　// 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除<br><br>yum list | grep mysql     //查看yum上提供的mysql数据库可下载的版本<br><br>yum install -y mysql-server mysql mysql-deve    //下载<br><br>rpm -qi mysql-server    //查看mysql版本<br><br>service mysqld start    //启动mysql<br><br>service mysqld restart    //重启mysql<br><br>chkconfig –list | grep mysqld    //查看mysql服务是不是开机自动启动<br><br>mysqld             0:关闭    1:关闭    2:关闭    3:关闭    4:关闭    5:关闭    6:关闭<br><br>chkconfig mysqld on    //设置成开机启动，这样就不用每次都去手动启动了<br><br>/usr/bin/mysqladmin -u root password ‘root’    //设置账号密码<br><br>mysql -u root -p    //进入mysql数据库<br><br>Enter password:        //输入密码即可<br><br>完毕！<br></p>\n<blockquote>\n<p>centos6.6安装mysql5.7.17</p>\n</blockquote>\n<p>因用yum安装的是比较古老的mysql版本，所以需要升级最新版本<br><br>首先查看安装的mysql，需要全部移除<br><br>rpm -qa | grep mysql<br><br>mysql-community-common-5.1.17-1.el6.x86_64<br><br>mysql-community-libs-5.2.17-1.el6.x86_64<br><br>mysql-community-server-5.1.17-1.el6.x86_64<br><br>mysql-community-client-5.1.17-1.el6.x86_64<br><br>一共四个需要全部删除<br><br>rpm -e –nodeps mysql-community-common-5.1.17-1.el6.x86_64<br><br>rpm -e –nodeps mysql-community-libs-5.2.17-1.el6.x86_64<br><br>rpm -e –nodeps mysql-community-server-5.1.17-1.el6.x86_64<br><br>rpm -e –nodeps mysql-community-client-5.1.17-1.el6.x86_64<br><br>rpm -qa | grep mysql<br><br>确保没有了mysql<br></p>\n<p>进入：<a href=\"https://dev.mysql.com/downloads/file/?id=467446\" target=\"_blank\" rel=\"external\">https://dev.mysql.com/downloads/file/?id=467446</a><br><br>下载到的包：mysql-5.7.17-1.el6.x86_64.rpm-bundle.tar<br><br>cd /tmp<br><br>rz mysql-5.7.17-1.el6.x86_64.rpm-bundle.tar<br><br>tar -xvf mysql-5.7.17-1.el6.x86_64.rpm-bundle.tar<br><br>rpm -ivh mysql-community-common-5.7.17-1.el6.x86_64.rpm<br><br>rpm -ivh mysql-community-libs-5.7.17-1.el6.x86_64.rpm<br><br>rpm -ivh mysql-community-client-5.7.17-1.el6.x86_64.rpm<br><br>rpm -ivh mysql-community-server-5.7.17-1.el6.x86_64.rpm<br><br>chmod 777 -R /var/lib/mysql<br><br>service mysqld start<br><br>MySQL Daemon failed to start.<br><br>正在启动 mysqld： [失败]<br><br>getenforce<br><br>Enforcing<br><br>setenforce 0<br><br>service mysqld start<br><br>正在启动 mysqld： [确定]<br><br>mysql<br><br>ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)<br><br>尼玛，我怎么知道密码？我都没设置密码<br><br>shell&gt;/usr/bin/mysqld_safe –skip-grant-tables &amp;<br><br>shell&gt;mysql -u root -p<br><br>下面的密码直接键入回车即可.<br><br>mysql&gt;use mysql<br><br>mysql&gt;update mysql.user set authentication_string=PASSWORD(‘root’) where user=’root’ and host=’localhost’;<br><br>mysql&gt;flush privileges;<br><br>mysql&gt;exit;<br><br>shell&gt;mysql -u root -p<br><br>输入密码即可<br><br>完毕！<br><br>突然发现在关闭服务器后去启动mysql的时候又启动失败了<br><br>猜想是getenforce，于是乎执行getenforce<br><br>竟然成了Enforcing，如果每次启动都这样，岂不是很累，于是乎不能忍<br><br>google了下，永久解决办法是设置永久性的<br><br>shell&gt;vi /etc/sysconfig/selinux<br><br>SELINUX=disabled 设置成这样既可，打开是知道共有三个值可以选择的<br><br>done!<br><br>然后进入<br>shell&gt;mysql -u root -p<br><br>输入密码后执行<br><br>mysql&gt;show databases;<br><br>ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.<br><br>错误解决办法：<br><br>mysql&gt;SET PASSWORD= PASSWORD(‘new password’);<br><br>mysql&gt;ALTER USER ‘root’@’localhost’ PASSWORD EXPIRE NEVER;<br><br>mysql&gt;flush privileges;<br><br>mysql&gt;exit;<br><br>重新登录既可<br><br>done!<br></p>\n","categories":[],"tags":["linux","mysql"]},{"title":"PHP7环境搭建那点事儿","url":"http://grooes.com/2017/09/17/PHP7环境搭建那点事儿/","content":"<blockquote>\n<p>安装包准备</p>\n</blockquote>\n<ul>\n<li>nginx-1.11.6.tar.gz</li>\n<li>google-perftools-1.6.tar.gz</li>\n<li>libevent-2.0.22-stable.tar.gz</li>\n<li>libiconv-1.13.1.tar.gz</li>\n<li>libmcrypt-2.5.8.tar.gz</li>\n<li>libmemcached-1.0.18.tar.gz</li>\n<li>m9php-php7.tar.gz</li>\n<li>mcrypt-2.6.8.tar.gz</li>\n<li>memcache-3.0.8.tgz</li>\n<li>memcached-1.4.34.tar.gz</li>\n<li>mhash-0.9.9.9.tar.gz</li>\n<li>pecl-memcache-php7.tar.gz</li>\n<li>php-7.0.14.tar.gz</li>\n<li>php-memcached-master.tar.gz</li>\n<li>phpredis-develop.tar.gz</li>\n<li>protobuf-master.tar.gz</li>\n</ul>\n<blockquote>\n<p>环境准备</p>\n</blockquote>\n<ul>\n<li>yum -y install lrzsz（为了运用rz命令把本地包上次上去）</li>\n<li>yum -y install wget(为了下载包)</li>\n<li>yum -y install zip unzip(为了解压包)</li>\n<li>yum -y install gcc(安装gcc)</li>\n<li>yum -y install openssl openssl-devel(安装openssl)</li>\n<li>yum -y install pcre*(安装pcre)</li>\n<li>yum -y install gcc gcc-c++(安装c++)</li>\n<li>yum -y install libxml2<em>(安装相关libxml2</em>)</li>\n<li>yum -y install curl<em>(安装curl</em>相关)</li>\n<li>yum -y install curl-devel(安装curl-devel)</li>\n<li>yum -y install libpng*(安装libpng相关)</li>\n</ul>\n<h4 id=\"相关环境搭建\"><a href=\"#相关环境搭建\" class=\"headerlink\" title=\"相关环境搭建\"></a>相关环境搭建</h4><blockquote>\n<p>安装nginx</p>\n</blockquote>\n<p>tar zxf nginx-1.11.6.tar.gz<br><br>cd nginx-1.11.6<br><br>./configure –prefix=/usr/local/nginx –user=www –group=www –with-http_stub_status_module –with-http_flv_module –with-http_ssl_module<br><br>make &amp;&amp; make install<br></p>\n<blockquote>\n<p>启动nginx</p>\n</blockquote>\n<p>/usr/local/nginx/sbin/nginx<br><br>报错：nginx: [emerg] getpwnam(“www”) failed<br><br>解决方式1：在nginx.conf中 把user nobody的注释去掉既可<br><br>解决方式2：/usr/sbin/groupadd -f www            /usr/sbin/useradd -g www www<br></p>\n<p>本机浏览器输入：<a href=\"http://ip/\" target=\"_blank\" rel=\"external\">http://ip/</a><br><br>成功标识：Welcome to nginx!<br><br>失败标识：考虑关闭防火墙或者打开80端口即可<br></p>\n<blockquote>\n<p>安装libiconv</p>\n</blockquote>\n<p>tar zxf libiconv-1.13.1.tar.gz<br><br>cd libiconv-1.13.1/<br><br>./configure –prefix=/usr/local/libiconv<br><br>make &amp;&amp; make install<br></p>\n<blockquote>\n<p>安装libevent</p>\n</blockquote>\n<p>tar zxvf libevent-2.0.22-stable.tar.gz <br><br>cd libevent-2.0.22-stable<br><br>./configure –prefix=/usr/local/libevent<br><br>make &amp;&amp; make test &amp;&amp; make install<br></p>\n<blockquote>\n<p>安装libmcrypt</p>\n</blockquote>\n<p>tar zxf libmcrypt-2.5.8.tar.gz<br><br>cd libmcrypt-2.5.8/<br><br>./configure<br><br>make &amp;&amp; make install<br></p>\n<blockquote>\n<p>安装mhash</p>\n</blockquote>\n<p>tar zxf mhash-0.9.9.9.tar.gz<br><br>cd mhash-0.9.9.9<br><br>./configure<br><br>make &amp;&amp; make install<br></p>\n<blockquote>\n<p>开启软连接</p>\n</blockquote>\n<p>ln -s /usr/local/lib/libmcrypt.la /usr/lib/libmcrypt.la<br><br>ln -s /usr/local/lib/libmcrypt.so /usr/lib/libmcrypt.so<br><br>ln -s /usr/local/lib/libmcrypt.so.4 /usr/lib/libmcrypt.so.4<br><br>ln -s /usr/local/lib/libmcrypt.so.4.4.8 /usr/lib/libmcrypt.so.4.4.8<br><br>ln -s /usr/local/lib/libmhash.a /usr/lib/libmhash.a<br><br>ln -s /usr/local/lib/libmhash.la /usr/lib/libmhash.la<br><br>ln -s /usr/local/lib/libmhash.so /usr/lib/libmhash.so<br><br>ln -s /usr/local/lib/libmhash.so.2 /usr/lib/libmhash.so.2<br><br>ln -s /usr/local/lib/libmhash.so.2.0.1 /usr/lib/libmhash.so.2.0.1<br><br>ln -s /usr/local/bin/libmcrypt-config /usr/bin/libmcrypt-config<br></p>\n<blockquote>\n<p>安装memcached</p>\n</blockquote>\n<p>tar -zxvf memcached-1.4.34.tar.gz<br><br>cd memcached-1.4.34<br><br>./configure –prefix=/usr/local/memcached  –with-libevent=/usr/local/libevent/<br><br>make &amp;&amp; make install<br><br>启动memcached :<br><br>/usr/local/memcached/bin/memcached -d -m 100 -u root -l 127.0.0.1 -p 11211 -c 256 -P /tmp/memcached.pid</p>\n<blockquote>\n<p>安装mcrypt</p>\n</blockquote>\n<p>tar zvxf mcrypt-2.6.8.tar.gz<br><br>cd mcrypt-2.6.8<br><br>./configure<br><br>报错：configure: error: <em>*</em> libmcrypt was not found （其实我已经安装了libmcrypt）<br><br>解决：export LD_LIBRARY_PATH=/usr/local/lib: LD_LIBRARY_PATH<br><br>./configure<br><br>make &amp;&amp; make install<br></p>\n<blockquote>\n<p>安装php7</p>\n</blockquote>\n<p>tar zvxf php-7.0.14.tar.gz<br><br>cd php-7.0.14<br><br>./configure –prefix=/usr/local/php –with-config-file-path=/usr/local/php/etc –enable-fpm  –enable-pcntl –enable-mysqlnd –enable-opcache –enable-sockets –enable-sysvmsg –enable-sysvsem –enable-sysvshm –enable-shmop –enable-zip –enable-ftp –enable-soap –enable-xml –enable-mbstring –disable-rpath –disable-debug –disable-fileinfo –with-mysqli –with-pdo-mysql –with-pcre-regex –with-iconv –with-zlib –with-mcrypt –with-gd –with-openssl –with-mhash –with-xmlrpc –with-curl –without-pear –enable-fileinfo –with-imap-ssl<br><br>make &amp;&amp; make install<br><br>cp ./php.ini-development /usr/local/php/etc/php.ini<br><br>cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf<br><br>cp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf<br><br>cp -R ./sapi/fpm/php-fpm /etc/init.d/php-fpm<br></p>\n<blockquote>\n<p>安装libmemcached</p>\n</blockquote>\n<p>tar zxvf libmemcached-1.0.18.tar.gz<br><br>cd libmemcached-1.0.18<br><br>./configure –prefix=/usr/local/libmemcached  –with-memcached<br><br>make &amp;&amp; make install<br></p>\n<blockquote>\n<p>安装php-memcached扩展</p>\n</blockquote>\n<p>tar xvzf php-memcached-master.tar.gz<br><br>cd php-memcached-master<br><br>/usr/local/php/bin/phpize<br><br>./configure –enable-memcached –with-php-config=/usr/local/php/bin/php-config –with-libmemcached-dir=/usr/local/libmemcached –disable-memcached-sasl<br><br>make &amp;&amp; make install<br><br>查看是否安装成功<br><br>/usr/local/php/bin/php -m<br></p>\n<blockquote>\n<p>测试php-memcached扩展</p>\n</blockquote>\n<p>vi /usr/local/php/etc/php.ini<br><br>添加：extension=memcached.so wq!<br><br>启动fpm:/usr/local/php/sbin/php-fpm -R<br><br>验证：ps -ef | grep ‘fpm’<br><br>启动memcached:/usr/local/memcached/bin/memcached -d -m 100 -u root -l 127.0.0.1 -p 11211 -c 256 -P /tmp/memcached.pid<br><br>验证：ps -ef | grep ‘memcached’<br><br>验证是否连接成功<br><br>vi /tmp/memcached.php<br><br>输入：<br><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">\t$m = <span class=\"keyword\">new</span> Memcached();</div><div class=\"line\">\t$m-&gt;addServer(<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">11211</span>);</div><div class=\"line\">\t$m-&gt;set(<span class=\"string\">'int'</span>, <span class=\"number\">99</span>);</div><div class=\"line\">\t$m-&gt;set(<span class=\"string\">'string'</span>, <span class=\"string\">'a simple string'</span>);</div><div class=\"line\">\t$m-&gt;set(<span class=\"string\">'array'</span>, <span class=\"keyword\">array</span>(<span class=\"number\">11</span>, <span class=\"number\">12</span>));</div><div class=\"line\">\t$m-&gt;set(<span class=\"string\">'object'</span>, <span class=\"keyword\">new</span> stdclass, time() + <span class=\"number\">300</span>);</div><div class=\"line\"></div><div class=\"line\">\tvar_dump($m-&gt;get(<span class=\"string\">'int'</span>));</div><div class=\"line\">\tvar_dump($m-&gt;get(<span class=\"string\">'string'</span>));</div><div class=\"line\">\tvar_dump($m-&gt;get(<span class=\"string\">'array'</span>));</div><div class=\"line\">\tvar_dump($m-&gt;get(<span class=\"string\">'object'</span>));</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>wq!<br><br>cd /tmp<br><br>执行：/usr/local/php/bin/php memcached.php 打印成功即可<br></p>\n<blockquote>\n<p>测试php-mysql扩展</p>\n</blockquote>\n<p>vi /tmp/mysql.php<br><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">\t$pdo = <span class=\"keyword\">new</span> PDO(<span class=\"string\">\"mysql:host=hostname;dbname=databasename\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"\"</span>);</div><div class=\"line\">\t$rs = $pdo -&gt; query(<span class=\"string\">\"select * from test\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">while</span>($row = $rs -&gt; fetch())&#123;</div><div class=\"line\">\t\tprint_r($row);</div><div class=\"line\">\t&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>wq!<br><br>cd /tmp<br><br>执行：/usr/local/php/bin/php mysql.php 打印成功即可</p>\n<blockquote>\n<p>安装php-redis扩展</p>\n</blockquote>\n<p>tar xvf phpredis-develop.tar.gz<br><br>cd phpredis-develop<br><br>/usr/local/php/bin/phpize<br><br>./configure –with-php-config=/usr/local/php/bin/php-config<br><br>make &amp;&amp; make install<br><br>vi /usr/local/php/etc/php.ini<br><br>输入：extension=redis.so<br><br>wq!<br><br>查看是否安装成功<br><br>/usr/local/php/bin/php -m<br></p>\n<blockquote>\n<p>安装m9php-php7扩展</p>\n</blockquote>\n<p>tar -zxvf m9php-php7.tar.gz<br><br>cd m9php/m9php<br><br>/usr/local/php/bin/phpize<br><br>./configure –with-php-config=/usr/local/php/bin/php-config<br><br>make &amp;&amp; make install<br><br>vi /usr/local/php/etc/php.ini<br><br>输入：extension=m9php.so<br><br>wq!<br><br>查看是否安装成功<br><br>/usr/local/php/bin/php -m<br></p>\n","categories":[],"tags":["php","linux"]},{"title":"categories","url":"http://grooes.com/categories/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://grooes.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://grooes.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://grooes.com/tag/index.html","content":"","categories":[],"tags":[]}]