<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Grooes.com</title>
  
  <subtitle>The power of expression</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://grooes.com/"/>
  <updated>2017-09-23T13:20:46.423Z</updated>
  <id>http://grooes.com/</id>
  
  <author>
    <name>qinghe Song</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis之数据结构篇</title>
    <link href="http://grooes.com/2017/09/23/redis%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/"/>
    <id>http://grooes.com/2017/09/23/redis之数据结构篇/</id>
    <published>2017-09-23T08:33:59.000Z</published>
    <updated>2017-09-23T13:20:46.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis设计与实现之数据结构篇"><a href="#redis设计与实现之数据结构篇" class="headerlink" title="redis设计与实现之数据结构篇"></a>redis设计与实现之数据结构篇</h2><h3 id="简单动态字符串-sds"><a href="#简单动态字符串-sds" class="headerlink" title="简单动态字符串(sds)"></a>简单动态字符串(sds)</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/songqinghehe/MyImage/raw/master/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从数据结构看sds为buf分配了5个字符和0个free空间，\0是不计算在len内，但是会分配额外的1字节空间，下面讲讲这样设计的好处</p><ul><li>数据结构中存了len字段，可以O(1)常数时间获取字符串长度</li><li>每次插入元素前都会检查sds空间是否足够，若不满足做适当的扩充，可以避免缓冲区溢出的可能性(C语言中每次插入或者删除字符的时候都要重新分配新的内存来保存新值，是一个很耗时的操作 )</li><li><p>sds采用空间预分配和惰性空间释放两种策略减少了内存重分配的次数，看到free字段就知道这是一个额外的空间来在某种程度上减少了重分配的次数，具体如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">如现有空间足够存放修改后内容，则不进行扩展，直接插入。</div><div class="line">如现有空间不足以存放修改后内容，且修改后sds的len小于1M，则扩展后len=free，比如修改后空间为15 byte，则分配的空间是31：15+15+1byte.</div><div class="line">如现有空间不足以存放修改后内容，且修改后sds的len大于1M，则分配1M的使用空间，则新的空间为20M+1M+1byte</div></pre></td></tr></table></figure></li><li><p>惰性空间释放:用于优化SDS缩减操作.当api对sds进行缩短操作后,程序不会释放缩短后空余出的空间,而是使用free属性把他们记录下来,当我们插入的时候就可以减少内存重分配了(不需要担心，我们以后不添加内容时，造成的内存泄露，因为sds提供了释放空间的API)</p></li><li>二进制安全，不像C语言，C字符串的字符必须某种编码(比如ASCII),并且除末尾外,其余地方不能出现空字符串\0,否则会被提前结束,(\0是c字符串的结束标识符),比如acvf\0sdsdsd\0,只能识别到acvf，而sds是根据len属性来判断字符串的结束，所以不存在是否有\0</li><li>由于SDS的buf数组以\0结尾,符合c字符串特征,因此,它可以使用C字符串的一些api</li></ul><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/songqinghehe/MyImage/raw/master/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">struct listNode&#123;</div><div class="line">    struct listNode *prev//前置节点</div><div class="line">    struct listNode *next//后置节点</div><div class="line">    void *value //节点值</div><div class="line">&#125;listNode;</div><div class="line"></div><div class="line">struct list&#123;</div><div class="line">    listNode *head;//表头节点</div><div class="line">    listNode *tail;//表尾节点</div><div class="line">    unsigned long len;//常数时间获取链表长度</div><div class="line">    void *(*dup)(void *ptr);//节点值复制函数</div><div class="line">    void *(*free)(void *ptr);//节点值释放函数</div><div class="line">    void *(*match)(void *ptr,void *key);//节点值对比函数</div><div class="line">&#125;list;</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/songqinghehe/MyImage/raw/master/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>链表的实现特性总结如下</p><ul><li>双端：每个节点都有prev和next，获取某个节点的前置节点和后置节点的复杂度都是O(1)</li><li>无环： 表头节点的 prev 指针和表尾节点的 next 指针都指向 NULL ， 对链表的访问以 NULL 为终点</li><li>带表头指针和表尾指针： 通过 list 结构的 head 指针和 tail 指针， 程序获取链表的表头节点和表尾节点的复杂度为 O(1) </li><li>带链表长度计数器： 程序使用 list 结构的 len 属性来对 list 持有的链表节点进行计数， 程序获取链表中节点数量的复杂度为 O(1) </li><li>多态： 链表节点使用 void* 指针来保存节点值， 并且可以通过 list 结构的 dup 、 free 、 match 三个属性为节点值设置类型特定函数， 所以链表可以用于保存各种不同类型的值</li></ul><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>字典又称为符号表、关联数组、映射，是一种用于保存键值对的抽象数据结构，下面看某结构实现</p><h4 id="哈希表实现"><a href="#哈希表实现" class="headerlink" title="哈希表实现"></a>哈希表实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">typedef struct dictht &#123;</div><div class="line">    dictEntry **table;//哈希表数组</div><div class="line">    unsigned long size;//哈希表大小</div><div class="line">    unsigned long sizemask;//哈希表大小掩码，用于计算索引值，总是等于 size - 1</div><div class="line">unsigned long used;//该哈希表已有节点的数量</div><div class="line">&#125; dictht;</div><div class="line"></div><div class="line">typedef struct dictEntry &#123;</div><div class="line">    void *key;//键</div><div class="line">    union &#123;</div><div class="line">        void *val;</div><div class="line">        uint64_t u64;</div><div class="line">        int64_t s64;</div><div class="line">    &#125; v;//值</div><div class="line">    struct dictEntry *next;//指向下个哈希表节点，形成链表</div><div class="line">&#125; dictEntry;</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/songqinghehe/MyImage/raw/master/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="字典-1"><a href="#字典-1" class="headerlink" title="字典"></a>字典</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">typedef struct dict &#123;</div><div class="line">    dictType *type;// 类型特定函数，指向 dictType 结构的指针，每个dictType结构保存了一簇用于操作特定类型键值对的函数，Redis 会为用途不同的字典设置不同的类型特定函数。</div><div class="line">    void *privdata;//私有数据，保存了需要传给那些类型特定函数的可选参数</div><div class="line">    dictht ht[2];//哈希表，是一个包含两个项的数组，数组中的每个项都是一个dictht哈希表， 一般情况下， 字典只使用ht[0]哈希表， ht[1]哈希表只会在对ht[0]哈希表进行rehash时使用</div><div class="line">    int rehashidx; //rehash索引，当rehash不在进行时，值为-1</div><div class="line">&#125; dict;</div><div class="line"></div><div class="line">typedef struct dictType &#123;</div><div class="line">    unsigned int (*hashFunction)(const void *key);//计算哈希值的函数</div><div class="line">    void *(*keyDup)(void *privdata, const void *key);//复制键的函数</div><div class="line">    void *(*valDup)(void *privdata, const void *obj);//复制值的函数</div><div class="line">    int (*keyCompare)(void *privdata, const void *key1, const void *key2);//对比键的函数</div><div class="line">    void (*keyDestructor)(void *privdata, void *key);//销毁键的函数</div><div class="line">    void (*valDestructor)(void *privdata, void *obj);//销毁值的函数</div><div class="line">&#125; dictType;</div></pre></td></tr></table></figure><p>下图展示一个没有进行rehash的字典<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/songqinghehe/MyImage/raw/master/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h4><p>当要将一个新的键值对添加到字典里面时， 程序需要先根据键值对的键计算出哈希值和索引值， 然后再根据索引值， 将包含新键值对的哈希表节点放到哈希表数组的指定索引上面，Redis 计算哈希值和索引值的方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//使用字典设置的哈希函数，计算键 key 的哈希值</div><div class="line">hash = dict-&gt;type-&gt;hashFunction(key);</div><div class="line"></div><div class="line">//使用哈希表的 sizemask 属性和哈希值，计算出索引值，根据情况不同，ht[x] 可以是 ht[0] 或者 ht[1]</div><div class="line">index = hash &amp; dict-&gt;ht[x].sizemask;</div></pre></td></tr></table></figure></p><p>下面是一个空字典的结构图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/songqinghehe/MyImage/raw/master/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>如上图，如果我们要将一个键值对 k0 和 v0 添加到字典里面， 那么程序会先使用语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hash = dict-&gt;type-&gt;hashFunction(k0);//计算键 k0 的哈希值，假设计算得出的哈希值为8</div><div class="line">index = hash &amp; dict-&gt;ht[0].sizemask = 8 &amp; 3 = 0;//计算出键k0的索引值0，这表示包含键值对k0和v0的节点应该被放置到哈希表数组的索引0位置上</div></pre></td></tr></table></figure></p><h4 id="解决键冲突"><a href="#解决键冲突" class="headerlink" title="解决键冲突"></a>解决键冲突</h4><p>当有两个或以上数量的键被分配到了哈希表数组的同一个索引上面时， 我们称这些键发生了冲突（collision），Redis 的哈希表使用链地址法（separate chaining）来解决键冲突： 每个哈希表节点都有一个 next 指针， 多个哈希表节点可以用 next 指针构成一个单向链表， 被分配到同一个索引上的多个节点可以用这个单向链表连接起来， 这就解决了键冲突的问题，如图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/songqinghehe/MyImage/raw/master/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>k1和k2键冲突的话，直接用单向链表连接起来，并且最新添加的放在表头（原因：dictEntry 节点组成的链表没有指向链表表尾的指针， 所以为了速度考虑， 程序总是将新节点添加到链表的表头位置（复杂度为 O(1)）， 排在其他已有节点的前面）</p><h4 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h4><p>随着操作的不断执行， 哈希表保存的键值对会逐渐地增多或者减少， 为了让哈希表的负载因子（load factor）维持在一个合理的范围之内， 当哈希表保存的键值对数量太多或者太少时， 程序需要对哈希表的大小进行相应的扩展或者收缩， Redis 对字典的哈希表执行 rehash 的步骤如下</p><ul><li><p>为字典的 ht[1] 哈希表分配空间， 这个哈希表的空间大小取决于要执行的操作， 以及 ht[0] 当前包含的键值对数量 （也即是 ht[0].used 属性的值）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">如果执行的是扩展操作， 那么 ht[1] 的大小为第一个大于等于 ht[0].used * 2 的 2^n （2 的 n 次方幂）</div><div class="line">如果执行的是收缩操作， 那么 ht[1] 的大小为第一个大于等于 ht[0].used 的 2^n</div></pre></td></tr></table></figure></li><li><p>将保存在 ht[0] 中的所有键值对 rehash 到 ht[1] 上面： rehash 指的是重新计算键的哈希值和索引值， 然后将键值对放置到 ht[1] 哈希表的指定位置上</p></li><li>当 ht[0] 包含的所有键值对都迁移到了 ht[1] 之后 （ht[0] 变为空表）， 释放 ht[0] ， 将 ht[1] 设置为 ht[0] ， 并在 ht[1] 新创建一个空白哈希表， 为下一次 rehash 做准备</li><li>哈希表的扩展与收缩，当以下条件中的任意一个被满足时， 程序会自动开始对哈希表执行扩展操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">服务器目前没有在执行 BGSAVE 命令或者 BGREWRITEAOF 命令， 并且哈希表的负载因子大于等于 1</div><div class="line">服务器目前正在执行 BGSAVE 命令或者 BGREWRITEAOF 命令， 并且哈希表的负载因子大于等于 5</div><div class="line">当哈希表的负载因子小于 0.1 时， 程序自动开始对哈希表执行收缩操作</div><div class="line">load_factor = ht[0].used / ht[0].size;//负载因子 = 哈希表已保存节点数量 / 哈希表大小</div></pre></td></tr></table></figure></li></ul><p>根据 BGSAVE 命令或 BGREWRITEAOF 命令是否正在执行， 服务器执行扩展操作所需的负载因子并不相同， 这是因为在执行 BGSAVE 命令或 BGREWRITEAOF 命令的过程中， Redis 需要创建当前服务器进程的子进程， 而大多数操作系统都采用写时复制（copy-on-write）技术来优化子进程的使用效率， 所以在子进程存在期间， 服务器会提高执行扩展操作所需的负载因子， 从而尽可能地避免在子进程存在期间进行哈希表扩展操作， 这可以避免不必要的内存写入操作， 最大限度地节约内存</p><h4 id="渐进式rehash"><a href="#渐进式rehash" class="headerlink" title="渐进式rehash"></a>渐进式rehash</h4><p>rehash 动作并不是一次性、集中式地完成的， 而是分多次、渐进式地完成的，原因在于， 如果 ht[0] 里只保存着四个键值对， 那么服务器可以在瞬间就将这些键值对全部 rehash 到 ht[1] ； 但是， 如果哈希表里保存的键值对数量不是四个， 而是四百万、四千万甚至四亿个键值对， 那么要一次性将这些键值对全部 rehash 到 ht[1] 的话， 庞大的计算量可能会导致服务器在一段时间内停止服务，所以哈希表渐进式 rehash 的详细步骤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">为 ht[1] 分配空间， 让字典同时持有 ht[0] 和 ht[1] 两个哈希表</div><div class="line">在字典中维持一个索引计数器变量 rehashidx ， 并将它的值设置为 0 ， 表示 rehash 工作正式开始</div><div class="line">在 rehash 进行期间， 每次对字典执行添加、删除、查找或者更新操作时， 程序除了执行指定的操作以外， 还会顺带将 ht[0] 哈希表在 rehashidx 索引上的所有键值对 rehash 到 ht[1] ， 当 rehash 工作完成之后， 程序将 rehashidx 属性的值增一</div><div class="line">随着字典操作的不断执行， 最终在某个时间点上， ht[0] 的所有键值对都会被 rehash 至 ht[1] ， 这时程序将 rehashidx 属性的值设为 -1 ， 表示 rehash 操作已完成</div></pre></td></tr></table></figure></p><p>渐进式 rehash 的好处在于它采取分而治之的方式， 将 rehash 键值对所需的计算工作均滩到对字典的每个添加、删除、查找和更新操作上， 从而避免了集中式 rehash 而带来的庞大计算量<br>因为在进行渐进式 rehash 的过程中， 字典会同时使用 ht[0] 和 ht[1] 两个哈希表， 所以在渐进式 rehash 进行期间， 字典的删除（delete）、查找（find）、更新（update）等操作会在两个哈希表上进行： 比如说， 要在字典里面查找一个键的话， 程序会先在 ht[0] 里面进行查找， 如果没找到的话， 就会继续到 ht[1] 里面进行查找，另外， 在渐进式 rehash 执行期间， 新添加到字典的键值对一律会被保存到 ht[1] 里面， 而 ht[0] 则不再进行任何添加操作： 这一措施保证了 ht[0] 包含的键值对数量会只减不增， 并随着 rehash 操作的执行而最终变成空表</p><h3 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h3><p>跳跃表是一种有序数据结构，通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的，支持O(logN)，最坏O(N)复杂度的节点查找，还可以通过顺序性操作来批量处理节点，另外可以和<a href="https://zhuanlan.zhihu.com/p/21428112" target="_blank" rel="external">平衡树</a>相媲美，且实现起来更简单，redis中只有 实现有序集合键、集群节点用作内部数据结构 来个地方，再没有其他用途</p><h4 id="跳跃表的实现"><a href="#跳跃表的实现" class="headerlink" title="跳跃表的实现"></a>跳跃表的实现</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/songqinghehe/MyImage/raw/master/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>位于图最左为zskiplist结构</p><ul><li>header ：指向跳跃表的表头节点</li><li>tail ：指向跳跃表的表尾节点</li><li>level ：记录目前跳跃表内，层数最大的那个节点的层数（表头节点的层数不计算在内）</li><li>length ：记录跳跃表的长度，也即是，跳跃表目前包含节点的数量（表头节点不计算在内）<br>位于 zskiplist 结构右方的是四个 zskiplistNode 结构， 该结构包含以下属性</li><li>层（level）：节点中用 L1 、 L2 、 L3 等字样标记节点的各个层， L1 代表第一层， L2 代表第二层，以此类推。每个层都带有两个属性：前进指针和跨度。前进指针用于访问位于表尾方向的其他节点，而跨度则记录了前进指针所指向节点和当前节点的距离。在上面的图片中，连线上带有数字的箭头就代表前进指针，而那个数字就是跨度。当程序从表头向表尾进行遍历时，访问会沿着层的前进指针进行</li><li>后退（backward）指针：节点中用 BW 字样标记节点的后退指针，它指向位于当前节点的前一个节点。后退指针在程序从表尾向表头遍历时使用</li><li>分值（score）：各个节点中的 1.0 、 2.0 和 3.0 是节点所保存的分值。在跳跃表中，节点按各自所保存的分值从小到大排列</li><li>成员对象（obj）：各个节点中的 o1 、 o2 和 o3 是节点所保存的成员对象<h4 id="跳跃表节点"><a href="#跳跃表节点" class="headerlink" title="跳跃表节点"></a>跳跃表节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">typedef struct zskiplistNode &#123;</div><div class="line">    struct zskiplistNode *backward;//后退指针</div><div class="line">    double score;//分值</div><div class="line">    robj *obj;//成员对象</div><div class="line">    struct zskiplistLevel &#123;</div><div class="line">        struct zskiplistNode *forward;//前进指针</div><div class="line">        unsigned int span;//跨度</div><div class="line">    &#125; level[];//层</div><div class="line">&#125; zskiplistNode;</div><div class="line"></div><div class="line">typedef struct zskiplist &#123;</div><div class="line">    struct zskiplistNode *header, *tail;//表头节点和表尾节点，header 和 tail 指针分别指向跳跃表的表头和表尾节点， 通过这两个指针， 程序定位表头节点和表尾节点的复杂度为 O(1) </div><div class="line">    </div><div class="line">    unsigned long length;//表中节点的数量，通过使用 length 属性来记录节点的数量， 程序可以在 O(1) 复杂度内返回跳跃表的长度</div><div class="line">    </div><div class="line">    int level;//表中层数最大的节点的层数，level 属性则用于在 O(1) 复杂度内获取跳跃表中层高最大的那个节点的层数量， 注意表头节点的层高并不计算在内</div><div class="line">&#125; zskiplist;</div></pre></td></tr></table></figure></li></ul><p>跳跃表节点的 level 数组可以包含多个元素， 每个元素都包含一个指向其他节点的指针， 程序可以通过这些层来加快访问其他节点的速度， 一般来说， 层的数量越多， 访问其他节点的速度就越快<br>每次创建一个新跳跃表节点的时候， 程序都根据幂次定律 （power law，越大的数出现的概率越小） 随机生成一个介于 1 和 32 之间的值作为 level 数组的大小， 这个大小就是层的“高度”<br>每个层都有一个指向表尾方向的前进指针（level[i].forward 属性）， 用于从表头向表尾方向访问节点<br>层的跨度（level[i].span 属性）用于记录两个节点之间的距离</p><ul><li>两个节点之间的跨度越大， 它们相距得就越远</li><li>指向 NULL 的所有前进指针的跨度都为 0 ， 因为它们没有连向任何节点</li></ul><p>节点的后退指针（backward 属性）用于从表尾向表头方向访问节点： 跟可以一次跳过多个节点的前进指针不同， 因为每个节点只有一个后退指针， 所以每次只能后退至前一个节点<br>节点的分值（score 属性）是一个 double 类型的浮点数， 跳跃表中的所有节点都按分值从小到大来排序<br>节点的成员对象（obj 属性）是一个指针， 它指向一个字符串对象， 而字符串对象则保存着一个 SDS 值<br><a href="https://www.zhihu.com/question/20202931" target="_blank" rel="external">为啥 redis 使用跳表(skiplist)而不是使用 red-black？</a></p><h3 id="整数集合"><a href="#整数集合" class="headerlink" title="整数集合"></a>整数集合</h3><h4 id="整数集合的实现"><a href="#整数集合的实现" class="headerlink" title="整数集合的实现"></a>整数集合的实现</h4><p>整数集合(intset)是集合键的底层实现之一，当一个集合只包含整数值元素，并且这个集合的元素数量不多时，redis就会使用此结构实现，用于保存整数值的集合抽象数据结构， 它可以保存类型为 int16_t 、 int32_t 或者 int64_t 的整数值， 并且保证集合中不会出现重复元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">typedef struct intset &#123;</div><div class="line">    uint32_t encoding;//编码方式</div><div class="line">    uint32_t length;//集合包含的元素数量</div><div class="line">    int8_t contents[];//保存元素的数组，整数集合的底层实现，整数集合的每个元素都是 contents 数组的一个数组项（item）， 各个项在数组中按值的大小从小到大有序地排列， 并且数组中不包含任何重复项</div><div class="line">&#125; intset;</div></pre></td></tr></table></figure></p><p>对于encoding，有如下解释</p><ul><li>如果 encoding 属性的值为 INTSET_ENC_INT16 ， 那么 contents 就是一个 int16_t 类型的数组， 数组里的每个项都是一个 int16_t 类型的整数值 （最小值为 -32,768 ，最大值为 32,767 ）</li><li>如果 encoding 属性的值为 INTSET_ENC_INT32 ， 那么 contents 就是一个 int32_t 类型的数组， 数组里的每个项都是一个 int32_t 类型的整数值 （最小值为 -2,147,483,648 ，最大值为 2,147,483,647 ）</li><li>如果 encoding 属性的值为 INTSET_ENC_INT64 ， 那么 contents 就是一个 int64_t 类型的数组， 数组里的每个项都是一个 int64_t 类型的整数值 （最小值为 -9,223,372,036,854,775,808 ，最大值为 9,223,372,036,854,775,807 ）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/songqinghehe/MyImage/raw/master/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>如上图，展示了另一个整数集合示例</li><li>encoding 属性的值为 INTSET_ENC_INT16 ， 表示整数集合的底层实现为 int16_t 类型的数组， 而集合保存的都是 int16_t 类型的整数值</li><li>length 属性的值为 5 ， 表示整数集合包含五个元素</li><li>contents 数组按从小到大的顺序保存着集合中的五个元素</li><li>因为每个集合元素都是 int16_t 类型的整数值， 所以 contents 数组的大小等于 sizeof(int16_t) <em> 5 = 16 </em> 5 = 80 位<h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4>每当我们要将一个新元素添加到整数集合里面， 并且新元素的类型比整数集合现有所有元素的类型都要长时， 整数集合需要先进行升级（upgrade）， 然后才能将新元素添加到整数集合里面，升级整数集合并添加新元素共分为三步进行</li><li>根据新元素的类型， 扩展整数集合底层数组的空间大小， 并为新元素分配空间</li><li>将底层数组现有的所有元素都转换成与新元素相同的类型， 并将类型转换后的元素放置到正确的位上， 而且在放置元素的过程中， 需要继续维持底层数组的有序性质不变</li><li>将新元素添加到底层数组里面</li></ul><p>升级之后新元素的摆放位置，因为引发升级的新元素的长度总是比整数集合现有的所有元素的长度都大，所以这个新元素的值要么就大于所有现有元素，要么就小于所有现有元素</p><ul><li>在新元素小于所有现有元素的情况下，新元素会被放置在底层数组的最开头(index=0)</li><li>在新元素大于所有现有元素的情况下，新元素会被放置在底层数组的最末尾(index=length-1)</li></ul><h4 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h4><p>整数集合不支持降级操作， 一旦对数组进行了升级， 编码就会一直保持升级后的状态</p><h3 id="压缩列表"><a href="#压缩列表" class="headerlink" title="压缩列表"></a>压缩列表</h3><p>压缩列表(ziplist)是列表键和哈希键的底层实现之一，当一个列表键只包含少量的列表项，并且每个列表项要么就是小整数值，要么就是长度比较短的字符串，redis就会使用压缩列表来做列表键的底层实现</p><h4 id="压缩列表的构成"><a href="#压缩列表的构成" class="headerlink" title="压缩列表的构成"></a>压缩列表的构成</h4><p>压缩列表是 Redis 为了节约内存而开发的， 由一系列特殊编码的连续内存块组成的顺序型（sequential）数据结构<br>结构如下图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/songqinghehe/MyImage/raw/master/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="压缩列表节点的构成"><a href="#压缩列表节点的构成" class="headerlink" title="压缩列表节点的构成"></a>压缩列表节点的构成</h4><p>每个压缩列表节点可以保存一个字节数组或者一个整数值， 其中， 字节数组可以是以下三种长度的其中一种</p><ul><li>长度小于等于 63 （2^{6}-1）字节的字节数组</li><li>长度小于等于 16383 （2^{14}-1） 字节的字节数组</li><li>长度小于等于 4294967295 （2^{32}-1）字节的字节数组</li></ul><p>而整数值则可以是以下六种长度的其中一种</p><ul><li>4 位长，介于 0 至 12 之间的无符号整数</li><li>1 字节长的有符号整数</li><li>3 字节长的有符号整数</li><li>int16_t 类型整数</li><li>int32_t 类型整数</li><li>int64_t 类型整数</li></ul><p>每个压缩列表节点都由 previous_entry_length 、 encoding 、 content 三个部分组成</p><ul><li><p>节点的 previous_entry_length 属性以字节为单位， 记录了压缩列表中前一个节点的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">如果前一节点的长度小于 254 字节， 那么 previous_entry_length 属性的长度为 1 字节： 前一节点的长度就保存在这一个字节里面</div><div class="line">如果前一节点的长度大于等于 254 字节， 那么 previous_entry_length 属性的长度为 5 字节： 其中属性的第一字节会被设置为 0xFE （十进制值 254）， 而之后的四个字节则用于保存前一节点的长度</div><div class="line">压缩列表的从表尾向表头遍历操作就是使用这一原理实现的： 只要我们拥有了一个指向某个节点起始地址的指针， 那么通过这个指针以及这个节点的 previous_entry_length 属性， 程序就可以一直向前一个节点回溯， 最终到达压缩列表的表头节点</div></pre></td></tr></table></figure></li><li><p>节点的 encoding 属性记录了节点的 content 属性所保存数据的类型以及长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">一字节、两字节或者五字节长， 值的最高位为 00 、 01 或者 10 的是字节数组编码： 这种编码表示节点的 content 属性保存着字节数组， 数组的长度由编码除去最高两位之后的其他位记录</div><div class="line">一字节长， 值的最高位以 11 开头的是整数编码： 这种编码表示节点的 content 属性保存着整数值， 整数值的类型和长度由编码除去最高两位之后的其他位记录</div></pre></td></tr></table></figure></li><li><p>节点的 content 属性负责保存节点的值， 节点值可以是一个字节数组或者整数， 值的类型和长度由节点的 encoding 属性决定</p><h4 id="连锁更新"><a href="#连锁更新" class="headerlink" title="连锁更新"></a>连锁更新</h4><p>考虑一种情况就是，一个列表里全是介于某个临界值的且连续多个的节点，如果在表头插入一个大于这个节点的值，那么节点中的previous_entry_length就会发生大批量的更改来达到效果，同理，小于这个临界值也会发生同样的效果，这就叫连锁更新，因为连锁更新在最坏情况下需要对压缩列表执行 N 次空间重分配操作， 而每次空间重分配的最坏复杂度为 O(N) ， 所以连锁更新的最坏复杂度为 O(N^2)<br>要注意的是， 尽管连锁更新的复杂度较高， 但它真正造成性能问题的几率是很低的</p></li><li>压缩列表里要恰好有多个连续的、长度介于 250 字节至 253 字节之间的节点， 连锁更新才有可能被引发， 在实际中， 这种情况并不多见</li><li>即使出现连锁更新， 但只要被更新的节点数量不多， 就不会对性能造成任何影响： 比如说， 对三五个节点进行连锁更新是绝对不会影响性能的</li></ul><p>以上原因， ziplistPush 等命令的平均复杂度仅为 O(N) ， 在实际中， 我们可以放心地使用这些函数， 而不必担心连锁更新会影响压缩列表的性能</p><p>至此redis的数据结构就已经完事儿了，接下来会复习redis中的二进制位数组（据我了解这个bit是一个很有实用场景的东西，尤其在节约内存方面）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;redis设计与实现之数据结构篇&quot;&gt;&lt;a href=&quot;#redis设计与实现之数据结构篇&quot; class=&quot;headerlink&quot; title=&quot;redis设计与实现之数据结构篇&quot;&gt;&lt;/a&gt;redis设计与实现之数据结构篇&lt;/h2&gt;&lt;h3 id=&quot;简单动态字符串-s
      
    
    </summary>
    
    
      <category term="redis" scheme="http://grooes.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>PHP中的Traits详解</title>
    <link href="http://grooes.com/2017/09/20/PHP%E4%B8%AD%E7%9A%84Traits%E8%AF%A6%E8%A7%A3/"/>
    <id>http://grooes.com/2017/09/20/PHP中的Traits详解/</id>
    <published>2017-09-20T13:14:08.000Z</published>
    <updated>2017-09-20T13:23:35.157Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://segmentfault.com/a/1190000002970128" target="_blank" rel="external">PHP-Trait特性详解</a><br>PHP是单继承的语言，在PHP 5.4 Traits出现之前，PHP的类无法同时从两个基类继承属性或方法。php的Traits和Go语言的组合功能类似，通过在类中使用use关键字声明要组合的Trait名称，而具体某个Trait的声明使用trait关键词，Trait不能直接实例化。具体用法请看下面的代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="keyword">trait</span> Drive &#123;</div><div class="line">        <span class="keyword">public</span> $carName = <span class="string">'trait'</span>;</div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">driving</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"driving &#123;$this-&gt;carName&#125;\n"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"eat\n"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</div><div class="line">        <span class="keyword">use</span> <span class="title">Drive</span>;</div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"study\n"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    $student = <span class="keyword">new</span> Student();</div><div class="line">    $student-&gt;study();</div><div class="line">    $student-&gt;eat();</div><div class="line">    $student-&gt;driving();</div><div class="line"></div><div class="line"><span class="comment">//输出结果如下</span></div><div class="line">study</div><div class="line">eat</div><div class="line">driving <span class="keyword">trait</span></div></pre></td></tr></table></figure></p><p>上面的例子中，Student类通过继承Person，有了eat方法，通过组合Drive，有了driving方法和属性carName。<br> 如果Trait、基类和本类中都存在某个同名的属性或者方法，最终会保留哪一个呢？通过下面的代码测试一下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">    <span class="keyword">trait</span> Drive &#123;</div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"hello drive\n"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">driving</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"driving from drive\n"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"hello person\n"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">driving</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"driving from person\n"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</div><div class="line">        <span class="keyword">use</span> <span class="title">Drive</span>;</div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"hello student\n"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    $student = <span class="keyword">new</span> Student();</div><div class="line">    $student-&gt;hello();</div><div class="line">    $student-&gt;driving();</div><div class="line">    </div><div class="line">    <span class="comment">//输出结果如下</span></div><div class="line">    hello student</div><div class="line">driving from drive</div></pre></td></tr></table></figure></p><p>因此得出结论：当方法或属性同名时，当前类中的方法会覆盖 trait的 方法，而 trait 的方法又覆盖了基类中的方法。<br>如果要组合多个Trait，通过逗号分隔 Trait名称：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Trait1</span>, <span class="title">Trait2</span>;</div></pre></td></tr></table></figure></p><p>如果多个Trait中包含同名方法或者属性时，会怎样呢？答案是当组合的多个Trait包含同名属性或者方法时，需要明确声明解决冲突，否则会产生一个致命错误。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">trait</span> Trait1 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Trait1::hello\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hi</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Trait1::hi\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">trait</span> Trait2 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Trait2::hello\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hi</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Trait2::hi\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class1</span> </span>&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">Trait1</span>, <span class="title">Trait2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输出结果如下</span></div><div class="line">PHP Fatal error:  <span class="keyword">Trait</span> method hello has not been applied, because there are collisions with other <span class="keyword">trait</span> methods on Class1 in ~/php54/trait_3.php on line <span class="number">20</span></div></pre></td></tr></table></figure><blockquote><p>使用insteadof和as操作符来解决冲突，insteadof是使用某个方法替代另一个，而as是给方法取一个别名，具体用法请看代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">trait</span> Trait1 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Trait1::hello\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hi</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Trait1::hi\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">trait</span> Trait2 &#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Trait2::hello\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hi</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Trait2::hi\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class1</span> </span>&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">Trait1</span>, <span class="title">Trait2</span> &#123;</div><div class="line">        <span class="title">Trait2</span>::<span class="title">hello</span> <span class="title">insteadof</span> <span class="title">Trait1</span>;</div><div class="line">        Trait1::hi <span class="keyword">insteadof</span> Trait2;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class2</span> </span>&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">Trait1</span>, <span class="title">Trait2</span> &#123;</div><div class="line">        <span class="title">Trait2</span>::<span class="title">hello</span> <span class="title">insteadof</span> <span class="title">Trait1</span>;</div><div class="line">        Trait1::hi <span class="keyword">insteadof</span> Trait2;</div><div class="line">        Trait2::hi <span class="keyword">as</span> hei;</div><div class="line">        Trait1::hello <span class="keyword">as</span> hehe;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$Obj1 = <span class="keyword">new</span> Class1();</div><div class="line">$Obj1-&gt;hello();</div><div class="line">$Obj1-&gt;hi();</div><div class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</div><div class="line">$Obj2 = <span class="keyword">new</span> Class2();</div><div class="line">$Obj2-&gt;hello();</div><div class="line">$Obj2-&gt;hi();</div><div class="line">$Obj2-&gt;hei();</div><div class="line">$Obj2-&gt;hehe();</div><div class="line"></div><div class="line"><span class="comment">//输出结果如下：</span></div><div class="line">Trait2::hello</div><div class="line">Trait1::hi</div><div class="line"></div><div class="line">Trait2::hello</div><div class="line">Trait1::hi</div><div class="line">Trait2::hi</div><div class="line">Trait1::hello</div></pre></td></tr></table></figure></p><p>as关键词还有另外一个用途，那就是修改方法的访问控制：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="keyword">trait</span> Hello &#123;</div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"hello,trait\n"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Class1</span> </span>&#123;</div><div class="line">        <span class="keyword">use</span> <span class="title">Hello</span> &#123;</div><div class="line">            <span class="title">hello</span> <span class="title">as</span> <span class="title">protected</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Class2</span> </span>&#123;</div><div class="line">        <span class="keyword">use</span> <span class="title">Hello</span> &#123;</div><div class="line">            <span class="title">Hello</span>::<span class="title">hello</span> <span class="title">as</span> <span class="title">private</span> <span class="title">hi</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    $Obj1 = <span class="keyword">new</span> Class1();</div><div class="line">    $Obj1-&gt;hello(); <span class="comment"># 报致命错误，因为hello方法被修改成受保护的</span></div><div class="line">    $Obj2 = <span class="keyword">new</span> Class2();</div><div class="line">    $Obj2-&gt;hello(); <span class="comment"># 原来的hello方法仍然是公共的</span></div><div class="line">    $Obj2-&gt;hi();  <span class="comment"># 报致命错误，因为别名hi方法被修改成私有的</span></div></pre></td></tr></table></figure></p><p>Trait 也能组合Trait，Trait中支持抽象方法、静态属性及静态方法，测试代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">trait</span> Hello &#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Hello\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">trait</span> World &#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">Hello</span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayWorld</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"World\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWorld</span><span class="params">()</span></span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">inc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> $c = <span class="number">0</span>;</div><div class="line">        $c = $c + <span class="number">1</span>;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"$c\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Doing something\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">World</span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWorld</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'get World'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$Obj = <span class="keyword">new</span> HelloWorld();</div><div class="line">$Obj-&gt;sayHello();</div><div class="line">$Obj-&gt;sayWorld();</div><div class="line"><span class="keyword">echo</span> $Obj-&gt;getWorld() . <span class="string">"\n"</span>;</div><div class="line">HelloWorld::doSomething();</div><div class="line">$Obj-&gt;inc();</div><div class="line">$Obj-&gt;inc();</div><div class="line"></div><div class="line"><span class="comment">//输出结果如下：</span></div><div class="line">Hello</div><div class="line">World</div><div class="line">get World</div><div class="line">Doing something</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://segmentfault.com/a/1190000002970128&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PHP-Trait特性详解&lt;/a&gt;&lt;br&gt;PHP是单继承的语言，在P
      
    
    </summary>
    
    
      <category term="php" scheme="http://grooes.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP中的浅复制和深复制</title>
    <link href="http://grooes.com/2017/09/20/PHP%E4%B8%AD%E7%9A%84%E6%B5%85%E5%A4%8D%E5%88%B6%E5%92%8C%E6%B7%B1%E5%A4%8D%E5%88%B6/"/>
    <id>http://grooes.com/2017/09/20/PHP中的浅复制和深复制/</id>
    <published>2017-09-20T13:03:31.000Z</published>
    <updated>2017-09-20T13:04:54.276Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>深刻理解PHP中的浅复制和深复制</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 深复制的原理是A的改变不会影响B的改变</span></div><div class="line"><span class="comment"> * 浅复制的原理是A的改变会影响B的改变</span></div><div class="line"><span class="comment">**/</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjA</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $num = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> $objB; <span class="comment">//包含的对象</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;objB = <span class="keyword">new</span> ObjB();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//只有实现了下面方法聚合类 才能实现深复制</span></div><div class="line">    <span class="comment">/*function __clone() &#123;</span></div><div class="line"><span class="comment">        $this-&gt;objB = clone $this-&gt;objB; </span></div><div class="line"><span class="comment">    &#125;*/</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjB</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $num2 = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//原型对象</span></div><div class="line">$objA = <span class="keyword">new</span> ObjA();</div><div class="line"><span class="comment">//复制对象（=复制引用）</span></div><div class="line">$objA2 = $objA;</div><div class="line">$objA2-&gt;num = <span class="number">2</span>;</div><div class="line"><span class="comment">//随着$objA2-&gt;num的变化 $objA-&gt;num也变化了</span></div><div class="line">print_r($objA-&gt;num . <span class="string">'&lt;br/&gt;'</span>); <span class="comment">//结果为2</span></div><div class="line">print_r($objA2-&gt;num . <span class="string">'&lt;br/&gt;'</span>); <span class="comment">//结果为2</span></div><div class="line"></div><div class="line"><span class="comment">//复制对象（‘clone’关键字克隆）</span></div><div class="line">$objA3 = <span class="keyword">clone</span> $objA;</div><div class="line">$objA3-&gt;num = <span class="number">4</span>;</div><div class="line"><span class="comment">//随着$objA3-&gt;num的变化 $objA-&gt;num没有变化</span></div><div class="line">print_r($objA-&gt;num . <span class="string">'&lt;br/&gt;'</span>); <span class="comment">//结果为2</span></div><div class="line">print_r($objA3-&gt;num . <span class="string">'&lt;br/&gt;'</span>); <span class="comment">//结果为4</span></div><div class="line"><span class="comment">//但是clone的对象（是聚合类）中包含其他对象时所包含的对象（objB）复制的是引用</span></div><div class="line">$objA3-&gt;objB-&gt;num2 = <span class="number">7</span>;</div><div class="line">print_r($objA3-&gt;objB-&gt;num2 . <span class="string">'&lt;br/&gt;'</span>); <span class="comment">//结果是7</span></div><div class="line">print_r($objA-&gt;objB-&gt;num2 . <span class="string">'&lt;br/&gt;'</span>); <span class="comment">//结果是7</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;深刻理解PHP中的浅复制和深复制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div
      
    
    </summary>
    
    
      <category term="php" scheme="http://grooes.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>实现一个base62_encode和base62_decode方法</title>
    <link href="http://grooes.com/2017/09/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAbase62-encode%E5%92%8Cbase62-decode%E6%96%B9%E6%B3%95/"/>
    <id>http://grooes.com/2017/09/20/实现一个base62-encode和base62-decode方法/</id>
    <published>2017-09-20T12:33:51.000Z</published>
    <updated>2017-09-20T12:35:42.246Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>实现一个base62_encode()和base62_decode()方法，要求base62_encode(1)=1,base62_encode(61)=z,base62_decode(‘z’)=61;语言不限</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//如果有经验的RD，一眼就知道62个字符是0-9A-Za-z，并且在微博推出的短链服务就知道，这是一道通向短链设计的一个必经之路，具体短链服务不懂怎么设计的自行google，这里不做过多解释</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base62</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> $string = <span class="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">base62_encode</span><span class="params">($str)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        $out = <span class="string">''</span>;</div><div class="line">        <span class="keyword">for</span> ($t = floor(log10($str) / log10(<span class="number">62</span>)); $t &gt;= <span class="number">0</span>; $t--) &#123;</div><div class="line">            $a = floor($str / pow(<span class="number">62</span>, $t));</div><div class="line">            $out = $out . substr(<span class="keyword">$this</span>-&gt;string, $a, <span class="number">1</span>);</div><div class="line">            $str = $str - ($a * pow(<span class="number">62</span>, $t));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $out;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">base62_decode</span><span class="params">($str)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        $out = <span class="number">0</span>;</div><div class="line">        $len = strlen($str) - <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> ($t = <span class="number">0</span>; $t &lt;= $len; $t++) &#123;</div><div class="line">            $out = $out + strpos(<span class="keyword">$this</span>-&gt;string, substr($str, $t, <span class="number">1</span>)) * pow(<span class="number">62</span>, $len - $t);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> substr(sprintf(<span class="string">"%f"</span>, $out) , <span class="number">0</span>, <span class="number">-7</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$object = <span class="keyword">new</span> Base62();</div><div class="line"><span class="keyword">echo</span> $object-&gt;base62_encode(<span class="number">1</span>) . <span class="string">"&lt;br/&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $object-&gt;base62_encode(<span class="number">61</span>) . <span class="string">"&lt;br/&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $object-&gt;base62_decode(<span class="string">'z'</span>) . <span class="string">"&lt;br/&gt;"</span>;</div><div class="line">    </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;实现一个base62_encode()和base62_decode()方法，要求base62_encode(1)=1,base62_encode(61)=z,base62_decode(‘z’)=61;语言不限&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="php" scheme="http://grooes.com/tags/php/"/>
    
      <category term="interview" scheme="http://grooes.com/tags/interview/"/>
    
      <category term="algorithm" scheme="http://grooes.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>go语言实现排序算法</title>
    <link href="http://grooes.com/2017/09/20/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://grooes.com/2017/09/20/go语言实现排序算法/</id>
    <published>2017-09-20T12:01:51.000Z</published>
    <updated>2017-09-20T12:03:09.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Go实现相关排序算法"><a href="#Go实现相关排序算法" class="headerlink" title="Go实现相关排序算法"></a>Go实现相关排序算法</h3><blockquote><p>Go实现冒泡排序</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>&#125;</div><div class="line">bubbleAsort(arr)</div><div class="line">bubbleZsort(arr)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//倒序</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleAsort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i :=<span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr)<span class="number">-1</span>; i++ &#123;</div><div class="line"><span class="keyword">for</span> j := i+<span class="number">1</span>; j&lt; <span class="built_in">len</span>(arr); j++ &#123;</div><div class="line"><span class="keyword">if</span> (arr[i] &lt; arr[j]) &#123;</div><div class="line">arr[i],arr[j] = arr[j],arr[i]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fmt.Println(arr)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//正序</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleZsort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i :=<span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr)<span class="number">-1</span>; i++ &#123;</div><div class="line"><span class="keyword">for</span> j := i+<span class="number">1</span>; j&lt; <span class="built_in">len</span>(arr); j++ &#123;</div><div class="line"><span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</div><div class="line">arr[i],arr[j] = arr[j],arr[i]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fmt.Println(arr)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>Go实现选择排序</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>&#125;</div><div class="line">selectAsort(arr)</div><div class="line">selectZsort(arr)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//倒序</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectAsort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">l := <span class="built_in">len</span>(arr)</div><div class="line">m := <span class="built_in">len</span>(arr) - <span class="number">1</span></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; m; i++ &#123;</div><div class="line">k := i</div><div class="line"><span class="keyword">for</span> j := i+<span class="number">1</span>; j &lt; l; j++ &#123;</div><div class="line"><span class="keyword">if</span> arr[k] &lt; arr[j] &#123;</div><div class="line">k = j</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> k != i &#123;</div><div class="line">arr[k],arr[i] = arr[i],arr[k]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fmt.Println(arr)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//正序</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectZsort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">l := <span class="built_in">len</span>(arr)</div><div class="line">m := <span class="built_in">len</span>(arr) - <span class="number">1</span></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; m; i++ &#123;</div><div class="line">k := i</div><div class="line"><span class="keyword">for</span> j := i+<span class="number">1</span>; j &lt; l; j++ &#123;</div><div class="line"><span class="keyword">if</span> arr[k] &gt; arr[j] &#123;</div><div class="line">k = j</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> k != i &#123;</div><div class="line">arr[k],arr[i] = arr[i],arr[k]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fmt.Println(arr)</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>Go实现快速排序</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;</div><div class="line">quickAsort(arr, <span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span>)</div><div class="line">fmt.Println(arr)</div><div class="line">quickZsort(arr, <span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span>)</div><div class="line">fmt.Println(arr)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//倒序</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickAsort</span><span class="params">(arr []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> (start &lt; end) &#123;</div><div class="line">i, j := start, end</div><div class="line">key := arr[(start + end)/<span class="number">2</span>]</div><div class="line"><span class="keyword">for</span> i &lt;= j &#123;</div><div class="line"><span class="keyword">for</span> arr[i] &gt; key &#123;</div><div class="line">i++</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> arr[j] &lt; key &#123;</div><div class="line">j--</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> i &lt;= j &#123;</div><div class="line">arr[i], arr[j] = arr[j], arr[i]</div><div class="line">i++</div><div class="line">j--</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> start &lt; j &#123;</div><div class="line">quickAsort(arr, start, j)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> end &gt; i &#123;</div><div class="line">quickAsort(arr, i, end)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//正序</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickZsort</span><span class="params">(arr []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> (start &lt; end) &#123;</div><div class="line">i, j := start, end</div><div class="line">key := arr[(start + end)/<span class="number">2</span>]</div><div class="line"><span class="keyword">for</span> i &lt;= j &#123;</div><div class="line"><span class="keyword">for</span> arr[i] &lt; key &#123;</div><div class="line">i++</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> arr[j] &gt; key &#123;</div><div class="line">j--</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> i &lt;= j &#123;</div><div class="line">arr[i], arr[j] = arr[j], arr[i]</div><div class="line">i++</div><div class="line">j--</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> start &lt; j &#123;</div><div class="line">quickZsort(arr, start, j)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> end &gt; i &#123;</div><div class="line">quickZsort(arr, i, end)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>Go实现插入排序</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;</div><div class="line">insertSort(arr)</div><div class="line">fmt.Println(arr)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">n := <span class="built_in">len</span>(arr)</div><div class="line"><span class="keyword">if</span> n &lt; <span class="number">2</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</div><div class="line"><span class="keyword">for</span> j := i; j &gt;<span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j<span class="number">-1</span>]; j-- &#123;</div><div class="line">arr[j], arr[j<span class="number">-1</span>] = arr[j<span class="number">-1</span>], arr[j]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>Go实现希尔排序</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;</div><div class="line">shellSort(arr)</div><div class="line">fmt.Println(arr)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">shellSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">n := <span class="built_in">len</span>(arr)</div><div class="line">h := <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">//寻找合适的间隔h</span></div><div class="line"><span class="keyword">for</span> h &lt; n/<span class="number">3</span> &#123;</div><div class="line">h = <span class="number">3</span>*h +<span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> h &gt;= <span class="number">1</span> &#123;</div><div class="line"><span class="keyword">for</span> i := h; i &lt; n; i++ &#123;</div><div class="line"><span class="keyword">for</span> j := i; j &gt;= h &amp;&amp; arr[j] &lt; arr[j<span class="number">-1</span>]; j -= h &#123;</div><div class="line">arr[j], arr[j<span class="number">-1</span>] = arr[j<span class="number">-1</span>], arr[j]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">h /= <span class="number">3</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Go实现相关排序算法&quot;&gt;&lt;a href=&quot;#Go实现相关排序算法&quot; class=&quot;headerlink&quot; title=&quot;Go实现相关排序算法&quot;&gt;&lt;/a&gt;Go实现相关排序算法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Go实现冒泡排序&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
    
      <category term="go" scheme="http://grooes.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中的 Array, Slice和 Map</title>
    <link href="http://grooes.com/2017/09/17/Go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84-Array-Slice%E5%92%8C-Map/"/>
    <id>http://grooes.com/2017/09/17/Go语言中的-Array-Slice和-Map/</id>
    <published>2017-09-17T12:51:23.000Z</published>
    <updated>2017-09-17T13:31:38.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Array, Slice和 Map的区别</p></blockquote><ul><li>Array 是值类型，Slice 和 Map 是引用类型。他们是有很大区别的，尤其是在参数传递的时候。</li><li>Slice 和 Map 的变量 仅仅声明是不行的，必须还要分配空间（也就是初始化，initialization） 才可以使用。</li><li>Slice 和 Map 这些引用变量 的 内存分配，不需要你操心，因为 golang 是存在 gc 机制的（垃圾回收机制）</li></ul><h3 id="Array-的用法"><a href="#Array-的用法" class="headerlink" title="Array 的用法"></a>Array 的用法</h3><ul><li><p>数组的声明（这里就是定义，给数据存储分配了空间）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arrayName [arraySize] dataType</div></pre></td></tr></table></figure></li><li><p>如果数组定义好之后， 没有给数组元素指定值，那么所有元素被自动初始化为零值</p></li><li><p>数组的初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> a = [<span class="number">10</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125; <span class="comment">//定义数组的时候，直接初始化</span></div><div class="line"><span class="keyword">var</span> b = [<span class="number">10</span>]<span class="keyword">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;  <span class="comment">//部分元素初始化， 其余元素零值</span></div><div class="line"><span class="keyword">var</span> c = [...]<span class="keyword">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;   <span class="comment">//由初始化列表决定数组长度，不可省去标识符 "..."，否则将变成切片Slice</span></div><div class="line"><span class="keyword">var</span> d = [<span class="number">10</span>]&#123;<span class="number">2</span>:<span class="number">4</span>, <span class="number">5</span>:<span class="number">7</span>&#125;   <span class="comment">//可以按照下标来进行初始化</span></div></pre></td></tr></table></figure></li><li><p>数组的访问，可以直接按照下标进行访问</p></li><li><p>数组的遍历(for)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span>(</div><div class="line">   <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> f = [<span class="number">20</span>]<span class="keyword">int</span> &#123;<span class="number">1</span>, <span class="number">1</span>&#125;</div><div class="line">    <span class="keyword">for</span> i := <span class="number">2</span>; i &lt; <span class="number">20</span>; i++ &#123;</div><div class="line">        f[i] = f[i<span class="number">-1</span>] + f[i<span class="number">-2</span>]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;   <span class="comment">//采用下标进行遍历</span></div><div class="line">        <span class="keyword">if</span> i % <span class="number">5</span> == <span class="number">0</span> &#123;</div><div class="line">            fmt.Printf(<span class="string">"\n"</span>)</div><div class="line">        &#125;</div><div class="line">        fmt.Printf(<span class="string">"f[%2d] = %4d"</span>,i , f[i])</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>数组的遍历(range)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span>(</div><div class="line">   <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> f = [<span class="number">20</span>]<span class="keyword">int</span> &#123;<span class="number">1</span>, <span class="number">1</span>&#125;</div><div class="line">    <span class="keyword">for</span> i := <span class="number">2</span>; i &lt; <span class="number">20</span>; i++ &#123;</div><div class="line">        f[i] = f[i<span class="number">-1</span>] + f[i <span class="number">-2</span>]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> i , v := <span class="keyword">range</span> f &#123;   <span class="comment">//采用 range 关键字 进行遍历</span></div><div class="line">        fmt.Printf(<span class="string">"f[%2d] = %4d"</span>, i, v)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>多维数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a [<span class="number">3</span>][<span class="number">4</span>]<span class="keyword">int</span></div><div class="line"><span class="keyword">var</span> b = [<span class="number">3</span>][<span class="number">4</span>]<span class="keyword">int</span> &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;, &#123;<span class="number">2</span>,<span class="number">3</span>, <span class="number">4</span>&#125;&#125;</div></pre></td></tr></table></figure></li><li><p>多维数组遍历</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">//找到二维数组中的最大元素</span></div><div class="line">    <span class="keyword">var</span> i, j, row, col, max <span class="keyword">int</span></div><div class="line">    <span class="keyword">var</span> a = [<span class="number">3</span>][<span class="number">4</span>]<span class="keyword">int</span> &#123;&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span> , <span class="number">9</span>&#125;, &#123;<span class="number">22</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>&#125;&#125;</div><div class="line">    max = a[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; = <span class="number">2</span>; i ++ &#123;</div><div class="line">            <span class="keyword">for</span> j := <span class="number">0</span>; j &lt;= <span class="number">3</span>; j++ &#123;</div><div class="line">                    <span class="keyword">if</span> a[i][j] &gt; max &#123;</div><div class="line">                        max = a[i][j]</div><div class="line">                        row = i</div><div class="line">                        col = j</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">    fmt.Println(<span class="string">"max = %d, row = %d, col = %d\n"</span>, max, row, col)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="Slice-的用法"><a href="#Slice-的用法" class="headerlink" title="Slice 的用法"></a>Slice 的用法</h3><blockquote><p>Slice 的声明（没有分配内存）</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1 []<span class="keyword">int</span></div></pre></td></tr></table></figure><ul><li>在创建切片的时候，不要指定切片的长度。（否则就成了数组）</li><li>切片的类型可以是Go 语言的任何基本数据类型（也包括 引用类型和 Struct 类型）</li><li>当一个切片被声明之后，没有初始化的时候，这个 s1 默认的值是 nil。切片的长度是0。可以使用内建函数 len() 获得切片的长度，使用内建函数 cap() 获得切片的容量。</li></ul><blockquote><p>Slice 的创建 (分配了内存)</p></blockquote><ul><li>三种创建方式： 基于底层数组创建，直接创建，或者 make() 函数创建</li><li><p>基于底层数组创建 slice</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> slice1 []<span class="keyword">int</span>   <span class="comment">//声明但是不分配空间</span></div><div class="line">slice1 = array[start:end]  <span class="comment">//这里不包含 end</span></div><div class="line">slice2 := array[:]         <span class="comment">// 引用全部的元素</span></div><div class="line">slice3 := array[<span class="number">0</span>:<span class="built_in">len</span>(array)]</div><div class="line"><span class="keyword">var</span> slice4 []<span class="keyword">int</span></div><div class="line">sliec34 = array    <span class="comment">//引用全部的元素</span></div></pre></td></tr></table></figure></li><li><p>直接创建 slice(在声明的时候，直接初始化。)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> slice1 = []<span class="keyword">int</span> &#123;<span class="number">1</span> ,<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</div></pre></td></tr></table></figure></li><li><p>make() 函数创建 slice</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> slice1 = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>)  <span class="comment">//长度和容量都是 5</span></div><div class="line"><span class="keyword">var</span> slice2 = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>, <span class="number">10</span>)  <span class="comment">//容量是5.</span></div></pre></td></tr></table></figure></li></ul><blockquote><p>Slice 的 访问和遍历(采用下标进行访问，采用 range 进行遍历。)</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">packge main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> slice1 = []<span class="keyword">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span> , <span class="number">4</span>, <span class="number">5</span>&#125;</div><div class="line">    <span class="comment">//使用下标访问 slice</span></div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;=<span class="number">4</span>; i++ &#123;</div><div class="line">        fmt.Println(<span class="string">"slice[%d] = %d"</span>, i, slice[i])</div><div class="line">    &#125;</div><div class="line">    fmt.Println()</div><div class="line">    <span class="comment">//使用range 进行遍历</span></div><div class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> slice &#123;</div><div class="line">        fmt.Println(<span class="string">"slice[%d] = %d"</span>, i, v)</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><blockquote><p>Slice 的操作</p></blockquote><ul><li>Slice 中的切片的元素，可以动态的添加和删除，所以操作起来要比数组更加方便</li><li>采用内建函数 append() 向切片尾部，增加新的元素， 这些元素保存到底层的数组。</li><li>append() 并不会影响原来的切片的属性，（原来切片的长度和cap）</li><li>append() 将会返回更新后的切片的对象。</li><li>append() 是个变参函数，可以一次性添加多个对象</li><li>append() 添加元素的个数超过 切片的 cap() 的时候，那么底层会 重新分配一个 “足够大” 的内存，一般来说是将原来的内存空间扩大二倍，然后将数据复制到新的内存中去， 原来的空间会保留 （供原先切片使用）（底层数组变化这个问题，应该关注一下） <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">//使用make 创建 切片</span></div><div class="line">    <span class="keyword">var</span> slice1 = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">6</span>)</div><div class="line">    <span class="comment">// 使用 append 添加元素，并且未超出 cap</span></div><div class="line">    slice2 := <span class="built_in">append</span>(slice1, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">    <span class="comment">// 使用 append 添加元素，并且超出 cap. 这个时候底层数组会变化，新增加的元素只会添加到新的底层数组，不会覆盖旧的底层数组。</span></div><div class="line">    slice3 := <span class="built_in">append</span>(slice1, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</div><div class="line">    slice1[<span class="number">0</span>] = <span class="number">10</span></div><div class="line">    fmt.Printf(<span class="string">"len = %d cap = %d %v\n"</span>, <span class="built_in">len</span>(slice1), <span class="built_in">cap</span>(slice1), slice1)</div><div class="line">    fmt.Printf(<span class="string">"len = %d cap = %d %v\n"</span>, <span class="built_in">len</span>(slice2), <span class="built_in">cap</span>(slice2), slice2)</div><div class="line">    fmt.Printf(<span class="string">"len = %d cap = %d %v\n"</span>, <span class="built_in">len</span>(slice3), <span class="built_in">cap</span>(slice3), slice3)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">程序输出是：</div><div class="line"><span class="built_in">len</span> = <span class="number">3</span> <span class="built_in">cap</span> = <span class="number">6</span> [<span class="number">10</span> <span class="number">0</span> <span class="number">0</span>]</div><div class="line"><span class="built_in">len</span> = <span class="number">6</span> <span class="built_in">cap</span> = <span class="number">6</span> [<span class="number">10</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]     <span class="comment">// 这里的[1, 2, 3] 没有被 [4, 5, 6]覆盖</span></div><div class="line"><span class="built_in">len</span> = <span class="number">7</span> <span class="built_in">cap</span> = <span class="number">12</span> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]   <span class="comment">//这里第一个元素没有变成10，并且容量变成原来的2倍。</span></div></pre></td></tr></table></figure></li></ul><blockquote><p>切片元素的复制</p></blockquote><ul><li>使用切片长时间引用超大的底层数组，会导致严重的内存浪费现象。 可以新建一个小的slice 对象，然后将所需要的数据复制过去，这样子就不会引用底层数组，直接拷贝了数据，这就是需求。函数 copy()可以 在切片之间复制元素。</li><li>copy() 可以复制的元素数量取决于 复制方 和 被复制方的最小长度。</li><li>同一个底层数组之间的 元素复制，会导致元素重叠问题。<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> slice1 = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</div><div class="line">    <span class="keyword">var</span> slice2 = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)</div><div class="line">    <span class="keyword">var</span> n <span class="keyword">int</span></div><div class="line">    n = <span class="built_in">copy</span>(slice2, slice1) <span class="comment">// just copy three elements</span></div><div class="line">    fmt.Println(n, slice2, <span class="built_in">len</span>(slice2), <span class="built_in">cap</span>(slice2))</div><div class="line"></div><div class="line">    slice3 := slice1[<span class="number">3</span>:<span class="number">6</span>]   <span class="comment">//二者引用同一个底层数组</span></div><div class="line">    n = <span class="built_in">copy</span>(slice3, slice1[<span class="number">1</span>:<span class="number">5</span>])  <span class="comment">//所以，copy的时候发生元素重叠</span></div><div class="line">    fmt.Println(n, slice1, slice3)</div><div class="line"></div><div class="line">&#125;</div><div class="line">程序输出为：</div><div class="line"><span class="number">3</span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] <span class="number">3</span> <span class="number">5</span></div><div class="line"><span class="number">3</span> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span>] [<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]   <span class="comment">//可以看到元素重叠</span></div></pre></td></tr></table></figure></li></ul><h3 id="Map-的用法"><a href="#Map-的用法" class="headerlink" title="Map 的用法"></a>Map 的用法</h3><h4 id="map-存储的是-键值对-key-value-。是一个无序的数据的集合，通过键来进行索引得到对应的值。-这种方式可以加快查找速度。Map-通常称为-字典（dictionary）-或者哈希表-Hash-table-。Map-现在是很多语言的标配。"><a href="#map-存储的是-键值对-key-value-。是一个无序的数据的集合，通过键来进行索引得到对应的值。-这种方式可以加快查找速度。Map-通常称为-字典（dictionary）-或者哈希表-Hash-table-。Map-现在是很多语言的标配。" class="headerlink" title="map 存储的是 键值对(key-value)。是一个无序的数据的集合，通过键来进行索引得到对应的值。 这种方式可以加快查找速度。Map 通常称为 字典（dictionary） 或者哈希表(Hash table)。Map 现在是很多语言的标配。"></a>map 存储的是 键值对(key-value)。是一个无序的数据的集合，通过键来进行索引得到对应的值。 这种方式可以加快查找速度。Map 通常称为 字典（dictionary） 或者哈希表(Hash table)。Map 现在是很多语言的标配。</h4><blockquote><p>字典的声明</p></blockquote><ul><li>字典名称，“键”类型， “值”类型 </li><li>不需要给字典指定长度，字典的长度会在初始化或者创建的过程中动态增长</li><li>Key 必须是能支持 比较运算符（==, !=）的数据类型，比如 整数，浮点数，指针，数组，结构体，接口等。 而不能是 函数，字典，切片这些类型。</li><li>Value 类型 可以是Go语言的任何基本数据类型。<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mapName <span class="keyword">map</span>[keyType]valueType</div></pre></td></tr></table></figure></li></ul><blockquote><p>字典的初始化 和 创建</p></blockquote><ul><li>字典 声明好之后，必须经过初始化或者创建 才能使用。未初始化或者创建的字典为 nil</li><li>可以使用“{}”来在声明的时候进行初始化</li><li>可是使用 make()来创建字典</li><li>创建或者初始化之后，就可以使用 “=”操作符来动态的向字典中添加数据项了<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map1 <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> &#123;&#125;  <span class="comment">//字典的初始化</span></div><div class="line">map1[<span class="string">"key1"</span>] = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> map2 <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></div><div class="line">map2 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)  <span class="comment">//字典的创建</span></div><div class="line">map2[<span class="string">"key2"</span>] = <span class="number">2</span>    <span class="comment">//使用 等号 添加数据项</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> map3 <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></div><div class="line">map3[<span class="string">"key1"</span>] = <span class="number">2</span>   <span class="comment">//编译不通过，字典没有初始化或者创建</span></div><div class="line"></div><div class="line">v, OK := mapName[Key]    <span class="comment">//元素的查找 注意这里是 :=</span></div></pre></td></tr></table></figure></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> map1 = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"key1"</span>: <span class="number">100</span>, <span class="string">"key2"</span>: <span class="number">200</span>&#125;</div><div class="line">    <span class="comment">//</span></div><div class="line">    v, OK := map1[<span class="string">"key1"</span>]</div><div class="line">    <span class="keyword">if</span> OK &#123;</div><div class="line">        fmt.Println(v, OK)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        fmt.Println(v)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 这里 不是 :=，是 = ，因为这些变量已经定义过了。</span></div><div class="line">    v, OK = map1[<span class="string">"key3"</span>]</div><div class="line">    <span class="keyword">if</span> OK &#123;</div><div class="line">        fmt.Println(v, OK)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        fmt.Println(v)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">输出为：</div><div class="line"><span class="number">100</span> <span class="literal">true</span></div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure><blockquote><p>字典项的删除</p></blockquote><ul><li>go 提供了内置函数 delete() 来删除容器内的元素。(如果key1值不存在，那么调用将什么也不发生，也不会产生副作用。 但是，如果传入的map 是一个 nil，那么将导致程序出现异常，这一点在写程序的时候特别注意。)<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">delete</span>(map1, <span class="string">"key1"</span>)</div></pre></td></tr></table></figure></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> map1 = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"key1"</span>: <span class="number">100</span>, <span class="string">"key2"</span>: <span class="number">200</span>, <span class="string">"key3"</span>: <span class="number">300</span>&#125;</div><div class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> map1 &#123;</div><div class="line">        fmt.Println(k, v)</div><div class="line">        <span class="keyword">if</span> k == <span class="string">"key2"</span> &#123;</div><div class="line">            <span class="built_in">delete</span>(map1, k)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> k == <span class="string">"key3"</span> &#123;</div><div class="line">            map1[<span class="string">"key4"</span>] = <span class="number">400</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(map1)</div><div class="line">&#125;</div><div class="line">程序输出：</div><div class="line">key2 <span class="number">200</span></div><div class="line">key3 <span class="number">300</span></div><div class="line">key1 <span class="number">100</span></div><div class="line"><span class="keyword">map</span>[key1:<span class="number">100</span> key4:<span class="number">400</span> key3:<span class="number">300</span>]  <span class="comment">//可以看到 map 是无序的。</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Array, Slice和 Map的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Array 是值类型，Slice 和 Map 是引用类型。他们是有很大区别的，尤其是在参数传递的时候。&lt;/li&gt;
&lt;li&gt;Slice 和 Map 的变量
      
    
    </summary>
    
    
      <category term="go" scheme="http://grooes.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>mysql安装那点事儿</title>
    <link href="http://grooes.com/2017/09/17/mysql%E5%AE%89%E8%A3%85%E9%82%A3%E7%82%B9%E4%BA%8B%E5%84%BF/"/>
    <id>http://grooes.com/2017/09/17/mysql安装那点事儿/</id>
    <published>2017-09-17T09:02:24.000Z</published>
    <updated>2017-09-17T09:03:35.251Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>安装mysql</p></blockquote><p>rpm -qa | grep mysql　　// 这个命令就会查看该操作系统上是否已经安装了mysql数据库<br><br>rpm -e mysql　　// 普通删除模式<br><br>rpm -e –nodeps mysql　　// 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除<br><br>yum list | grep mysql     //查看yum上提供的mysql数据库可下载的版本<br><br>yum install -y mysql-server mysql mysql-deve    //下载<br><br>rpm -qi mysql-server    //查看mysql版本<br><br>service mysqld start    //启动mysql<br><br>service mysqld restart    //重启mysql<br><br>chkconfig –list | grep mysqld    //查看mysql服务是不是开机自动启动<br><br>mysqld             0:关闭    1:关闭    2:关闭    3:关闭    4:关闭    5:关闭    6:关闭<br><br>chkconfig mysqld on    //设置成开机启动，这样就不用每次都去手动启动了<br><br>/usr/bin/mysqladmin -u root password ‘root’    //设置账号密码<br><br>mysql -u root -p    //进入mysql数据库<br><br>Enter password:        //输入密码即可<br><br>完毕！<br></p><blockquote><p>centos6.6安装mysql5.7.17</p></blockquote><p>因用yum安装的是比较古老的mysql版本，所以需要升级最新版本<br><br>首先查看安装的mysql，需要全部移除<br><br>rpm -qa | grep mysql<br><br>mysql-community-common-5.1.17-1.el6.x86_64<br><br>mysql-community-libs-5.2.17-1.el6.x86_64<br><br>mysql-community-server-5.1.17-1.el6.x86_64<br><br>mysql-community-client-5.1.17-1.el6.x86_64<br><br>一共四个需要全部删除<br><br>rpm -e –nodeps mysql-community-common-5.1.17-1.el6.x86_64<br><br>rpm -e –nodeps mysql-community-libs-5.2.17-1.el6.x86_64<br><br>rpm -e –nodeps mysql-community-server-5.1.17-1.el6.x86_64<br><br>rpm -e –nodeps mysql-community-client-5.1.17-1.el6.x86_64<br><br>rpm -qa | grep mysql<br><br>确保没有了mysql<br></p><p>进入：<a href="https://dev.mysql.com/downloads/file/?id=467446" target="_blank" rel="external">https://dev.mysql.com/downloads/file/?id=467446</a><br><br>下载到的包：mysql-5.7.17-1.el6.x86_64.rpm-bundle.tar<br><br>cd /tmp<br><br>rz mysql-5.7.17-1.el6.x86_64.rpm-bundle.tar<br><br>tar -xvf mysql-5.7.17-1.el6.x86_64.rpm-bundle.tar<br><br>rpm -ivh mysql-community-common-5.7.17-1.el6.x86_64.rpm<br><br>rpm -ivh mysql-community-libs-5.7.17-1.el6.x86_64.rpm<br><br>rpm -ivh mysql-community-client-5.7.17-1.el6.x86_64.rpm<br><br>rpm -ivh mysql-community-server-5.7.17-1.el6.x86_64.rpm<br><br>chmod 777 -R /var/lib/mysql<br><br>service mysqld start<br><br>MySQL Daemon failed to start.<br><br>正在启动 mysqld： [失败]<br><br>getenforce<br><br>Enforcing<br><br>setenforce 0<br><br>service mysqld start<br><br>正在启动 mysqld： [确定]<br><br>mysql<br><br>ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)<br><br>尼玛，我怎么知道密码？我都没设置密码<br><br>shell&gt;/usr/bin/mysqld_safe –skip-grant-tables &amp;<br><br>shell&gt;mysql -u root -p<br><br>下面的密码直接键入回车即可.<br><br>mysql&gt;use mysql<br><br>mysql&gt;update mysql.user set authentication_string=PASSWORD(‘root’) where user=’root’ and host=’localhost’;<br><br>mysql&gt;flush privileges;<br><br>mysql&gt;exit;<br><br>shell&gt;mysql -u root -p<br><br>输入密码即可<br><br>完毕！<br><br>突然发现在关闭服务器后去启动mysql的时候又启动失败了<br><br>猜想是getenforce，于是乎执行getenforce<br><br>竟然成了Enforcing，如果每次启动都这样，岂不是很累，于是乎不能忍<br><br>google了下，永久解决办法是设置永久性的<br><br>shell&gt;vi /etc/sysconfig/selinux<br><br>SELINUX=disabled 设置成这样既可，打开是知道共有三个值可以选择的<br><br>done!<br><br>然后进入<br>shell&gt;mysql -u root -p<br><br>输入密码后执行<br><br>mysql&gt;show databases;<br><br>ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.<br><br>错误解决办法：<br><br>mysql&gt;SET PASSWORD= PASSWORD(‘new password’);<br><br>mysql&gt;ALTER USER ‘root’@’localhost’ PASSWORD EXPIRE NEVER;<br><br>mysql&gt;flush privileges;<br><br>mysql&gt;exit;<br><br>重新登录既可<br><br>done!<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;安装mysql&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;rpm -qa | grep mysql　　// 这个命令就会查看该操作系统上是否已经安装了mysql数据库&lt;br&gt;&lt;br&gt;rpm -e mysql　　// 普通删除模式&lt;br&gt;&lt;br&gt;rp
      
    
    </summary>
    
    
      <category term="linux" scheme="http://grooes.com/tags/linux/"/>
    
      <category term="mysql" scheme="http://grooes.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>PHP7环境搭建那点事儿</title>
    <link href="http://grooes.com/2017/09/17/PHP7%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E9%82%A3%E7%82%B9%E4%BA%8B%E5%84%BF/"/>
    <id>http://grooes.com/2017/09/17/PHP7环境搭建那点事儿/</id>
    <published>2017-09-17T01:30:09.000Z</published>
    <updated>2017-09-17T02:16:26.950Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>安装包准备</p></blockquote><ul><li>nginx-1.11.6.tar.gz</li><li>google-perftools-1.6.tar.gz</li><li>libevent-2.0.22-stable.tar.gz</li><li>libiconv-1.13.1.tar.gz</li><li>libmcrypt-2.5.8.tar.gz</li><li>libmemcached-1.0.18.tar.gz</li><li>m9php-php7.tar.gz</li><li>mcrypt-2.6.8.tar.gz</li><li>memcache-3.0.8.tgz</li><li>memcached-1.4.34.tar.gz</li><li>mhash-0.9.9.9.tar.gz</li><li>pecl-memcache-php7.tar.gz</li><li>php-7.0.14.tar.gz</li><li>php-memcached-master.tar.gz</li><li>phpredis-develop.tar.gz</li><li>protobuf-master.tar.gz</li></ul><blockquote><p>环境准备</p></blockquote><ul><li>yum -y install lrzsz（为了运用rz命令把本地包上次上去）</li><li>yum -y install wget(为了下载包)</li><li>yum -y install zip unzip(为了解压包)</li><li>yum -y install gcc(安装gcc)</li><li>yum -y install openssl openssl-devel(安装openssl)</li><li>yum -y install pcre*(安装pcre)</li><li>yum -y install gcc gcc-c++(安装c++)</li><li>yum -y install libxml2<em>(安装相关libxml2</em>)</li><li>yum -y install curl<em>(安装curl</em>相关)</li><li>yum -y install curl-devel(安装curl-devel)</li><li>yum -y install libpng*(安装libpng相关)</li></ul><h4 id="相关环境搭建"><a href="#相关环境搭建" class="headerlink" title="相关环境搭建"></a>相关环境搭建</h4><blockquote><p>安装nginx</p></blockquote><p>tar zxf nginx-1.11.6.tar.gz<br><br>cd nginx-1.11.6<br><br>./configure –prefix=/usr/local/nginx –user=www –group=www –with-http_stub_status_module –with-http_flv_module –with-http_ssl_module<br><br>make &amp;&amp; make install<br></p><blockquote><p>启动nginx</p></blockquote><p>/usr/local/nginx/sbin/nginx<br><br>报错：nginx: [emerg] getpwnam(“www”) failed<br><br>解决方式1：在nginx.conf中 把user nobody的注释去掉既可<br><br>解决方式2：/usr/sbin/groupadd -f www            /usr/sbin/useradd -g www www<br></p><p>本机浏览器输入：<a href="http://ip/" target="_blank" rel="external">http://ip/</a><br><br>成功标识：Welcome to nginx!<br><br>失败标识：考虑关闭防火墙或者打开80端口即可<br></p><blockquote><p>安装libiconv</p></blockquote><p>tar zxf libiconv-1.13.1.tar.gz<br><br>cd libiconv-1.13.1/<br><br>./configure –prefix=/usr/local/libiconv<br><br>make &amp;&amp; make install<br></p><blockquote><p>安装libevent</p></blockquote><p>tar zxvf libevent-2.0.22-stable.tar.gz <br><br>cd libevent-2.0.22-stable<br><br>./configure –prefix=/usr/local/libevent<br><br>make &amp;&amp; make test &amp;&amp; make install<br></p><blockquote><p>安装libmcrypt</p></blockquote><p>tar zxf libmcrypt-2.5.8.tar.gz<br><br>cd libmcrypt-2.5.8/<br><br>./configure<br><br>make &amp;&amp; make install<br></p><blockquote><p>安装mhash</p></blockquote><p>tar zxf mhash-0.9.9.9.tar.gz<br><br>cd mhash-0.9.9.9<br><br>./configure<br><br>make &amp;&amp; make install<br></p><blockquote><p>开启软连接</p></blockquote><p>ln -s /usr/local/lib/libmcrypt.la /usr/lib/libmcrypt.la<br><br>ln -s /usr/local/lib/libmcrypt.so /usr/lib/libmcrypt.so<br><br>ln -s /usr/local/lib/libmcrypt.so.4 /usr/lib/libmcrypt.so.4<br><br>ln -s /usr/local/lib/libmcrypt.so.4.4.8 /usr/lib/libmcrypt.so.4.4.8<br><br>ln -s /usr/local/lib/libmhash.a /usr/lib/libmhash.a<br><br>ln -s /usr/local/lib/libmhash.la /usr/lib/libmhash.la<br><br>ln -s /usr/local/lib/libmhash.so /usr/lib/libmhash.so<br><br>ln -s /usr/local/lib/libmhash.so.2 /usr/lib/libmhash.so.2<br><br>ln -s /usr/local/lib/libmhash.so.2.0.1 /usr/lib/libmhash.so.2.0.1<br><br>ln -s /usr/local/bin/libmcrypt-config /usr/bin/libmcrypt-config<br></p><blockquote><p>安装memcached</p></blockquote><p>tar -zxvf memcached-1.4.34.tar.gz<br><br>cd memcached-1.4.34<br><br>./configure –prefix=/usr/local/memcached  –with-libevent=/usr/local/libevent/<br><br>make &amp;&amp; make install<br><br>启动memcached :<br><br>/usr/local/memcached/bin/memcached -d -m 100 -u root -l 127.0.0.1 -p 11211 -c 256 -P /tmp/memcached.pid</p><blockquote><p>安装mcrypt</p></blockquote><p>tar zvxf mcrypt-2.6.8.tar.gz<br><br>cd mcrypt-2.6.8<br><br>./configure<br><br>报错：configure: error: <em>*</em> libmcrypt was not found （其实我已经安装了libmcrypt）<br><br>解决：export LD_LIBRARY_PATH=/usr/local/lib: LD_LIBRARY_PATH<br><br>./configure<br><br>make &amp;&amp; make install<br></p><blockquote><p>安装php7</p></blockquote><p>tar zvxf php-7.0.14.tar.gz<br><br>cd php-7.0.14<br><br>./configure –prefix=/usr/local/php –with-config-file-path=/usr/local/php/etc –enable-fpm  –enable-pcntl –enable-mysqlnd –enable-opcache –enable-sockets –enable-sysvmsg –enable-sysvsem –enable-sysvshm –enable-shmop –enable-zip –enable-ftp –enable-soap –enable-xml –enable-mbstring –disable-rpath –disable-debug –disable-fileinfo –with-mysqli –with-pdo-mysql –with-pcre-regex –with-iconv –with-zlib –with-mcrypt –with-gd –with-openssl –with-mhash –with-xmlrpc –with-curl –without-pear –enable-fileinfo –with-imap-ssl<br><br>make &amp;&amp; make install<br><br>cp ./php.ini-development /usr/local/php/etc/php.ini<br><br>cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf<br><br>cp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf<br><br>cp -R ./sapi/fpm/php-fpm /etc/init.d/php-fpm<br></p><blockquote><p>安装libmemcached</p></blockquote><p>tar zxvf libmemcached-1.0.18.tar.gz<br><br>cd libmemcached-1.0.18<br><br>./configure –prefix=/usr/local/libmemcached  –with-memcached<br><br>make &amp;&amp; make install<br></p><blockquote><p>安装php-memcached扩展</p></blockquote><p>tar xvzf php-memcached-master.tar.gz<br><br>cd php-memcached-master<br><br>/usr/local/php/bin/phpize<br><br>./configure –enable-memcached –with-php-config=/usr/local/php/bin/php-config –with-libmemcached-dir=/usr/local/libmemcached –disable-memcached-sasl<br><br>make &amp;&amp; make install<br><br>查看是否安装成功<br><br>/usr/local/php/bin/php -m<br></p><blockquote><p>测试php-memcached扩展</p></blockquote><p>vi /usr/local/php/etc/php.ini<br><br>添加：extension=memcached.so wq!<br><br>启动fpm:/usr/local/php/sbin/php-fpm -R<br><br>验证：ps -ef | grep ‘fpm’<br><br>启动memcached:/usr/local/memcached/bin/memcached -d -m 100 -u root -l 127.0.0.1 -p 11211 -c 256 -P /tmp/memcached.pid<br><br>验证：ps -ef | grep ‘memcached’<br><br>验证是否连接成功<br><br>vi /tmp/memcached.php<br><br>输入：<br><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$m = <span class="keyword">new</span> Memcached();</div><div class="line">$m-&gt;addServer(<span class="string">'127.0.0.1'</span>, <span class="number">11211</span>);</div><div class="line">$m-&gt;set(<span class="string">'int'</span>, <span class="number">99</span>);</div><div class="line">$m-&gt;set(<span class="string">'string'</span>, <span class="string">'a simple string'</span>);</div><div class="line">$m-&gt;set(<span class="string">'array'</span>, <span class="keyword">array</span>(<span class="number">11</span>, <span class="number">12</span>));</div><div class="line">$m-&gt;set(<span class="string">'object'</span>, <span class="keyword">new</span> stdclass, time() + <span class="number">300</span>);</div><div class="line"></div><div class="line">var_dump($m-&gt;get(<span class="string">'int'</span>));</div><div class="line">var_dump($m-&gt;get(<span class="string">'string'</span>));</div><div class="line">var_dump($m-&gt;get(<span class="string">'array'</span>));</div><div class="line">var_dump($m-&gt;get(<span class="string">'object'</span>));</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><p>wq!<br><br>cd /tmp<br><br>执行：/usr/local/php/bin/php memcached.php 打印成功即可<br></p><blockquote><p>测试php-mysql扩展</p></blockquote><p>vi /tmp/mysql.php<br><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$pdo = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=hostname;dbname=databasename"</span>,<span class="string">"root"</span>,<span class="string">""</span>);</div><div class="line">$rs = $pdo -&gt; query(<span class="string">"select * from test"</span>);</div><div class="line"><span class="keyword">while</span>($row = $rs -&gt; fetch())&#123;</div><div class="line">print_r($row);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><p>wq!<br><br>cd /tmp<br><br>执行：/usr/local/php/bin/php mysql.php 打印成功即可</p><blockquote><p>安装php-redis扩展</p></blockquote><p>tar xvf phpredis-develop.tar.gz<br><br>cd phpredis-develop<br><br>/usr/local/php/bin/phpize<br><br>./configure –with-php-config=/usr/local/php/bin/php-config<br><br>make &amp;&amp; make install<br><br>vi /usr/local/php/etc/php.ini<br><br>输入：extension=redis.so<br><br>wq!<br><br>查看是否安装成功<br><br>/usr/local/php/bin/php -m<br></p><blockquote><p>安装m9php-php7扩展</p></blockquote><p>tar -zxvf m9php-php7.tar.gz<br><br>cd m9php/m9php<br><br>/usr/local/php/bin/phpize<br><br>./configure –with-php-config=/usr/local/php/bin/php-config<br><br>make &amp;&amp; make install<br><br>vi /usr/local/php/etc/php.ini<br><br>输入：extension=m9php.so<br><br>wq!<br><br>查看是否安装成功<br><br>/usr/local/php/bin/php -m<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;安装包准备&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;nginx-1.11.6.tar.gz&lt;/li&gt;
&lt;li&gt;google-perftools-1.6.tar.gz&lt;/li&gt;
&lt;li&gt;libevent-2.0.22-stable.ta
      
    
    </summary>
    
    
      <category term="php" scheme="http://grooes.com/tags/php/"/>
    
      <category term="linux" scheme="http://grooes.com/tags/linux/"/>
    
  </entry>
  
</feed>
